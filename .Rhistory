my_results[i,6]=z
}
# Condition: if the column values are categorical
else {
#print (paste0("Column categorical ", i)) # Right loop verification
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x=tblFun(table_uc[,i])
z = nzsum(table_uc[,i])
# In the new table ("x"): keep different values in the different columns (in crhonologial order)
my_results[i,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[i,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[i,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[i,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[i,5]=sum(x[,1])
my_results[i,6]= z
}
}
rownames(my_results) = colnames(table_uc)
colnames(my_results) = c("Type", "Categories/Median", "Counts / Mean", "SD / %", "Number of non-zeros (n)", "Number of NA")
write.table (my_results, file = "~/uc_summary_table.txt", quote = F, sep = "\t")
reads_table <- read.table("~/Documents/Universitat/Holanda/Projecte/read_depth_per_sample_ibd.txt", sep = "\t", header = T, row.names= 1)
reads_table$IBDFEC <- "none"
reads_table$IBDFEC <- row.names(reads_table)
new_metadata <- read.table("~/Documents/Universitat/Holanda/Projecte/Metadata/new_metadata_txt.txt", sep = "\t", header = T, row.names = 1)
rownames(new_metadata) <- new_metadata[,3]
new_metadata <- new_metadata[,-3]
filtered_reads_metadata <- merge(new_metadata, reads_over_10M, by="row.names")
reads_over_10M <- as.data.frame(reads_table[with(reads_table, reads_table$Reads>10000000),])
filtered_reads_metadata <- merge(new_metadata, reads_over_10M, by="row.names")
rownames(filtered_reads_metadata) <- filtered_reads_metadata[,1]
filtered_reads_metadata <- filtered_reads_metadata[,-1]
filtered_reads_metadata$TotalReads <- NULL
filtered_reads_metadata$IBDFEC <- NULL
filtered_total_metadata <- filtered_reads_metadata
cond_na <- sapply(filtered_total_metadata, function(col) sum(is.na(col)) < 66)
filtered_total_metadata <- filtered_total_metadata[, cond_na, drop = FALSE]
filtered_total_metadata <- filtered_total_metadata[, sapply(filtered_total_metadata, function(col) length(unique(col))) > 1]
intestinal_groups <- read.table("~/Documents/Universitat/Holanda/Projecte/intestinal_groups.txt", sep = "\t", header = T, row.names=1)
filtered_total_metadata <- merge(intestinal_groups, filtered_total_metadata, by="row.names")
rownames(filtered_total_metadata) <- filtered_total_metadata[,1]
filtered_total_metadata <- filtered_total_metadata[,-1]
filtered_total_metadata$Sex2 <- NULL
filtered_total_metadata$WGSProjectID2 <- NULL
filtered_metadata <- write.table(filtered_total_metadata, file = "~/filtered_metadata.txt", quote = F, sep="\t")
total_metadata <- read.table("~/Documents/Universitat/Holanda/Projecte/Metadata/filtered_metadata.txt", sep = "\t", header = T, row.names = 1)
tblFun <- function(x) {
#Create a table
tbl <- table(x)
#Combine columnes/rows to get the counts and percentage (creates new table -> res)
res <- cbind(tbl,round(prop.table(tbl)*100,2))
#Give names to the columns
colnames(res) <- c('Count','Percentage')
res
}
nzsum <- function(x){
sum (is.na(x))
}
library (psych)
library (pastecs)
table_cd <- subset(total_metadata,total_metadata$DiagnosisCurrent=="CD")
table_uc <- subset(total_metadata,total_metadata$DiagnosisCurrent=="UC")
table_normal <- subset(total_metadata,total_metadata$Group=="normal")
table_intermediate <- subset(total_metadata, total_metadata$Group=="intermediate")
table_smallintestine <- subset(total_metadata, total_metadata$Group=="small intestine")
my_results=matrix(ncol = 6, nrow=ncol(total_metadata))
for (i in 1:ncol(total_metadata)) { # For each loop goes to the next column (numerical way)
#print (my_table[,i]) # Right loop verification
# Condition: if the column values are numerical/continuous
if ( is.numeric(total_metadata[,i])){
#print (paste0("Column numeric: ", i)) # Right loop verification
# Keep in "x" the result from describe function (done in the columns) - for each factor
x=describe(total_metadata[,i])
z = nzsum(total_metadata[,i])
# In the new table ("x"): keep different values in the different columns (in crhonological order)
my_results[i,1]="numerical"
my_results[i,2]=x$median
my_results[i,3]=x$mean
my_results[i,4]=x$sd
my_results[i,5]=x$n
my_results[i,6]=z
}
# Condition: if the column values are categorical
else {
#print (paste0("Column categorical ", i)) # Right loop verification
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x=tblFun(total_metadata[,i])
z = nzsum(total_metadata[,i])
# In the new table ("x"): keep different values in the different columns (in crhonologial order)
my_results[i,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[i,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[i,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[i,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[i,5]=sum(x[,1])
my_results[i,6]= z
}
}
rownames(my_results) = colnames(total_metadata)
colnames(my_results) = c("Type", "Categories/Median", "Counts / Mean", "SD / %", "Number of non-zeros (n)", "Number of NA")
write.table (my_results, file = "~/total_summary_table.txt", quote = F, sep = "\t")
my_results=matrix(ncol = 6, nrow=ncol(table_cd))
for (i in 1:ncol(table_cd)) { # For each loop goes to the next column (numerical way)
#print (my_table[,i]) # Right loop verification
# Condition: if the column values are numerical/continuous
if ( is.numeric(table_cd[,i])){
#print (paste0("Column numeric: ", i)) # Right loop verification
# Keep in "x" the result from describe function (done in the columns) - for each factor
x=describe(table_cd[,i])
z = nzsum(table_cd[,i])
# In the new table ("x"): keep different values in the different columns (in crhonological order)
my_results[i,1]="numerical"
my_results[i,2]=x$median
my_results[i,3]=x$mean
my_results[i,4]=x$sd
my_results[i,5]=x$n
my_results[i,6]=z
}
# Condition: if the column values are categorical
else {
#print (paste0("Column categorical ", i)) # Right loop verification
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x=tblFun(table_cd[,i])
z = nzsum(table_cd[,i])
# In the new table ("x"): keep different values in the different columns (in crhonologial order)
my_results[i,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[i,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[i,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[i,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[i,5]=sum(x[,1])
my_results[i,6]= z
}
}
rownames(my_results) = colnames(table_cd)
colnames(my_results) = c("Type", "Categories/Median", "Counts / Mean", "SD / %", "Number of non-zeros (n)", "Number of NA")
write.table (my_results, file = "~/cd_summary_table.txt", quote = F, sep = "\t")
my_results=matrix(ncol = 6, nrow=ncol(table_uc))
for (i in 1:ncol(table_uc)) { # For each loop goes to the next column (numerical way)
#print (my_table[,i]) # Right loop verification
# Condition: if the column values are numerical/continuous
if ( is.numeric(table_uc[,i])){
#print (paste0("Column numeric: ", i)) # Right loop verification
# Keep in "x" the result from describe function (done in the columns) - for each factor
x=describe(table_uc[,i])
z = nzsum(table_uc[,i])
# In the new table ("x"): keep different values in the different columns (in crhonological order)
my_results[i,1]="numerical"
my_results[i,2]=x$median
my_results[i,3]=x$mean
my_results[i,4]=x$sd
my_results[i,5]=x$n
my_results[i,6]=z
}
# Condition: if the column values are categorical
else {
#print (paste0("Column categorical ", i)) # Right loop verification
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x=tblFun(table_uc[,i])
z = nzsum(table_uc[,i])
# In the new table ("x"): keep different values in the different columns (in crhonologial order)
my_results[i,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[i,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[i,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[i,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[i,5]=sum(x[,1])
my_results[i,6]= z
}
}
rownames(my_results) = colnames(table_uc)
colnames(my_results) = c("Type", "Categories/Median", "Counts / Mean", "SD / %", "Number of non-zeros (n)", "Number of NA")
write.table (my_results, file = "~/uc_summary_table.txt", quote = F, sep = "\t")
my_results=matrix(ncol = 6, nrow=ncol(table_normal))
for (i in 1:ncol(table_normal)) { # For each loop goes to the next column (numerical way)
#print (my_table[,i]) # Right loop verification
# Condition: if the column values are numerical/continuous
if ( is.numeric(table_normal[,i])){
#print (paste0("Column numeric: ", i)) # Right loop verification
# Keep in "x" the result from describe function (done in the columns) - for each factor
x=describe(table_normal[,i])
z = nzsum(table_normal[,i])
# In the new table ("x"): keep different values in the different columns (in crhonological order)
my_results[i,1]="numerical"
my_results[i,2]=x$median
my_results[i,3]=x$mean
my_results[i,4]=x$sd
my_results[i,5]=x$n
my_results[i,6]=z
}
# Condition: if the column values are categorical
else {
#print (paste0("Column categorical ", i)) # Right loop verification
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x=tblFun(table_normal[,i])
z = nzsum(table_normal[,i])
# In the new table ("x"): keep different values in the different columns (in crhonologial order)
my_results[i,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[i,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[i,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[i,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[i,5]=sum(x[,1])
my_results[i,6]= z
}
}
rownames(my_results) = colnames(table_normal)
colnames(my_results) = c("Type", "Categories/Median", "Counts / Mean", "SD / %", "Number of non-zeros (n)", "Number of NA")
write.table (my_results, file = "~/normal_summary_table.txt", quote = F, sep = "\t")
my_results=matrix(ncol = 6, nrow=ncol(table_intermediate))
for (i in 1:ncol(table_intermediate)) { # For each loop goes to the next column (numerical way)
#print (my_table[,i]) # Right loop verification
# Condition: if the column values are numerical/continuous
if ( is.numeric(table_intermediate[,i])){
#print (paste0("Column numeric: ", i)) # Right loop verification
# Keep in "x" the result from describe function (done in the columns) - for each factor
x=describe(table_intermediate[,i])
z = nzsum(table_intermediate[,i])
# In the new table ("x"): keep different values in the different columns (in crhonological order)
my_results[i,1]="numerical"
my_results[i,2]=x$median
my_results[i,3]=x$mean
my_results[i,4]=x$sd
my_results[i,5]=x$n
my_results[i,6]=z
}
# Condition: if the column values are categorical
else {
#print (paste0("Column categorical ", i)) # Right loop verification
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x=tblFun(table_intermediate[,i])
z = nzsum(table_intermediate[,i])
# In the new table ("x"): keep different values in the different columns (in crhonologial order)
my_results[i,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[i,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[i,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[i,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[i,5]=sum(x[,1])
my_results[i,6]= z
}
}
rownames(my_results) = colnames(table_intermediate)
colnames(my_results) = c("Type", "Categories/Median", "Counts / Mean", "SD / %", "Number of non-zeros (n)", "Number of NA")
write.table (my_results, file = "~/intermediate_summary_table.txt", quote = F, sep = "\t")
my_results=matrix(ncol = 6, nrow=ncol(table_smallintestine))
for (i in 1:ncol(table_smallintestine)) { # For each loop goes to the next column (numerical way)
#print (my_table[,i]) # Right loop verification
# Condition: if the column values are numerical/continuous
if ( is.numeric(table_smallintestine[,i])){
#print (paste0("Column numeric: ", i)) # Right loop verification
# Keep in "x" the result from describe function (done in the columns) - for each factor
x=describe(table_smallintestine[,i])
z = nzsum(table_smallintestine[,i])
# In the new table ("x"): keep different values in the different columns (in crhonological order)
my_results[i,1]="numerical"
my_results[i,2]=x$median
my_results[i,3]=x$mean
my_results[i,4]=x$sd
my_results[i,5]=x$n
my_results[i,6]=z
}
# Condition: if the column values are categorical
else {
#print (paste0("Column categorical ", i)) # Right loop verification
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x=tblFun(table_smallintestine[,i])
z = nzsum(table_smallintestine[,i])
# In the new table ("x"): keep different values in the different columns (in crhonologial order)
my_results[i,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[i,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[i,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[i,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[i,5]=sum(x[,1])
my_results[i,6]= z
}
}
rownames(my_results) = colnames(table_smallintestine)
colnames(my_results) = c("Type", "Categories/Median", "Counts / Mean", "SD / %", "Number of non-zeros (n)", "Number of NA")
write.table (my_results, file = "~/small_intestine_summary_table.txt", quote = F, sep = "\t")
tax_table <- read.table("~/Documents/Universitat/Holanda/Projecte/filtered_tax_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
factor_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Metadata/filtered_metadata.txt", sep = "\t", header = T, row.names = 1, check.names = F)
my_results <- matrix(ncol = 3, nrow=ncol(factor_table))
for (i in 1:ncol(factor_table)) {
#Create a table for complete cases
final_factor_table <- factor_table[complete.cases(factor_table[,i]),]
filter_tax_table <- tax_table[rownames(final_factor_table),]
ad <- adonis(formula = filter_tax_table ~ final_factor_table[,i] , data = final_factor_table, permutations = 1000, method = "bray")
aov_table <- ad$aov.tab
my_results[i,1]=aov_table[1,1]
my_results[i,2]=aov_table[1,5]
my_results[i,3]=aov_table[1,6]
}
library(vegan)
for (i in 1:ncol(factor_table)) {
#Create a table for complete cases
final_factor_table <- factor_table[complete.cases(factor_table[,i]),]
filter_tax_table <- tax_table[rownames(final_factor_table),]
ad <- adonis(formula = filter_tax_table ~ final_factor_table[,i] , data = final_factor_table, permutations = 1000, method = "bray")
aov_table <- ad$aov.tab
my_results[i,1]=aov_table[1,1]
my_results[i,2]=aov_table[1,5]
my_results[i,3]=aov_table[1,6]
}
View(my_results)
View(my_results)
rownames(my_results) = colnames(factor_table)
colnames(my_results) = c("Df", "R2", "Pr(>F)")
ad <- adonis(formula = filter_tax_table ~ ACE_inhibitor , data = final_factor_table, permutations = 1000, method = "bray")
aov_table <- ad$aov.tab
aov_table
ad <- adonis(formula = filter_tax_table ~ Group , data = final_factor_table, permutations = 1000, method = "bray")
ad$aov.tab
ad <- adonis(formula = filter_tax_table ~ Weight , data = final_factor_table, permutations = 1000, method = "bray")
reads_table <- read.table("~/Documents/Universitat/Holanda/Projecte/read_depth_per_sample_ibd.txt", sep = "\t", header = T, row.names= 1)
reads_table$IBDFEC <- "none"
reads_table$IBDFEC <- row.names(reads_table)
reads_over_10M <- as.data.frame(reads_table[with(reads_table, reads_table$Reads>10000000),])
new_metadata <- read.table("~/Documents/Universitat/Holanda/Projecte/Metadata/new_metadata_txt.txt", sep = "\t", header = T, row.names = 1)
rownames(new_metadata) <- new_metadata[,3]
new_metadata <- new_metadata[,-3]
filtered_reads_metadata <- merge(new_metadata, reads_over_10M, by="row.names")
rownames(filtered_reads_metadata) <- filtered_reads_metadata[,1]
filtered_reads_metadata <- filtered_reads_metadata[,-1]
filtered_reads_metadata$TotalReads <- NULL
filtered_reads_metadata$IBDFEC <- NULL
filtered_total_metadata <- filtered_reads_metadata
cond_na <- sapply(filtered_total_metadata, function(col) sum(is.na(col)) < 66)
filtered_total_metadata <- filtered_total_metadata[, cond_na, drop = FALSE]
filtered_total_metadata <- filtered_total_metadata[, sapply(filtered_total_metadata, function(col) length(unique(col))) > 1]
intestinal_groups <- read.table("~/Documents/Universitat/Holanda/Projecte/intestinal_groups.txt", sep = "\t", header = T, row.names=1)
filtered_total_metadata <- merge(intestinal_groups, filtered_total_metadata, by="row.names")
rownames(filtered_total_metadata) <- filtered_total_metadata[,1]
filtered_total_metadata <- filtered_total_metadata[,-1]
View(filtered_total_metadata)
filtered_total_metadata$Sex2 <- NULL
filtered_total_metadata$WGSProjectID2 <- NULL
filtered_total_metadata$MedicationMesalazines <- NULL
filtered_total_metadata$MedicationPPI <- NULL
filtered_metadata <- write.table(filtered_total_metadata, file = "~/filtered_metadata.txt", quote = F, sep="\t")
getwd()
factor_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Metadata/filtered_metadata.txt", sep = "\t", header = T, row.names = 1, check.names = F)
na_results <- matrix(ncol = 1, nrow=ncol(factor_table))
View(factor_table)
nasum <- function(x){
sum (is.na(x))
}
na_results <- matrix(ncol = 1, nrow=ncol(factor_table))
for (i in 1:ncol(factor_table)) {
na_num <-  nasum(factor_table[,i])
na_results[i,1] = na_sum
}
for (i in 1:ncol(factor_table)) {
na_num <-  nasum(factor_table[,i])
na_results[i,1] = na_sum
}
nasum <- function(x){
sum (is.na(x))
}
na_results <- matrix(ncol = 1, nrow=ncol(factor_table))
for (i in 1:ncol(factor_table)) {
z = nasum(factor_table[,i])
na_results[i,1] = z
}
rownames(na_results) = colnames(factor_table)
colnames(na_results) = "Nº NA"
na_results <- as.data.frame(na_results)
View(na_results)
for (i in 1:ncol(factor_table)) {
na_sum = nasum(factor_table[,i])
na_results[i,1] = na_sum
}
na_results <- matrix(ncol = 1, nrow=ncol(factor_table))
for (i in 1:ncol(factor_table)) {
na_sum = nasum(factor_table[,i])
na_results[i,1] = na_sum
}
rownames(na_results) = colnames(factor_table)
colnames(na_results) = "Nº NA"
na_results <- as.data.frame(na_results)
adonis_test <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/results_adonis.txt", sep = "\t", header = T, row.names = 1, check.names = F)
View(adonis_test)
adonis_test <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/results_adonis.txt", sep = "\t", header = T, row.names = 1, check.names = F)
View(adonis_test)
adonis_results <- merge(adonis_test, na_results, by="row.names")
View(adonis_results)
rownames(adonis_results) <- adonis_results[,1]
adonis_results <- adonis_results[,-1]
data(hgA)
library(stats)
data(hgA)
View(adonis_test)
adonis_test <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/results_adonis.txt", sep = "\t", header = T, row.names = 1, check.names = F)
View(adonis_test)
colnames(adonis_test) = c("Df", "R2", "Pr(>F)")
adonis_results <- merge(adonis_test, na_results, by="row.names")
rownames(adonis_results) <- adonis_results[,1]
adonis_results <- adonis_results[,-1]
p_correction_fdr <- p.adjust(adonis_results$`Pr(>F)`, method = "fdr")
p_correction_fdr <- as.data.frame(p.adjust(adonis_results$`Pr(>F)`, method = "fdr"))
View(p_correction_fdr)
p_correction_bonferroni <- as.data.frame(p.adjust(adonis_results$`Pr(>F)`, method = "bonferroni"))
View(p_correction_fdr)
View(p_correction_bonferroni)
View(p_correction_fdr)
rownames(p_correction_fdr) <- rownames(adonis_results)
View(p_correction_bonferroni)
rownames(p_correction_bonferroni) <- rownames(adonis_results)
final_adonis_results <- merge(adonis_results, p_correction_fdr, by="row.names")
View(final_adonis_results)
rownames(final_adonis_results) <- final_adonis_results[,1]
final_adonis_results <- final_adonis_results[,-1]
final_adonis_results <- merge(final_adonis_results, p_correction_bonferroni, by="row.names")
rownames(final_adonis_results) <- final_adonis_results[,1]
final_adonis_results <- final_adonis_results[,-1]
na_results <- matrix(ncol = 1, nrow=ncol(factor_table))
for (i in 1:ncol(factor_table)) {
na_sum = nasum(factor_table[,i])
na_results[i,1] = na_sum
}
rownames(na_results) = colnames(factor_table)
colnames(na_results) = "N_NA"
na_results <- as.data.frame(na_results)
adonis_test <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/results_adonis.txt", sep = "\t", header = T, row.names = 1, check.names = F)
colnames(adonis_test) = c("Df", "R2", "Pr(>F)")
adonis_results <- merge(adonis_test, na_results, by="row.names")
rownames(adonis_results) <- adonis_results[,1]
adonis_results <- adonis_results[,-1]
library(stats)
p_correction_fdr <- as.data.frame(p.adjust(adonis_results$`Pr(>F)`, method = "fdr"))
rownames(p_correction_fdr) <- rownames(adonis_results)
p_correction_bonferroni <- as.data.frame(p.adjust(adonis_results$`Pr(>F)`, method = "bonferroni"))
rownames(p_correction_bonferroni) <- rownames(adonis_results)
final_adonis_results <- merge(adonis_results, p_correction_fdr, by="row.names")
rownames(final_adonis_results) <- final_adonis_results[,1]
final_adonis_results <- final_adonis_results[,-1]
final_adonis_results <- merge(final_adonis_results, p_correction_bonferroni, by="row.names")
rownames(final_adonis_results) <- final_adonis_results[,1]
final_adonis_results <- final_adonis_results[,-1]
colnames(final_adonis_results)[5] <- "FDR_p_value"
colnames(final_adonis_results)[6] <- "Bonferroni_p_value"
View(final_adonis_results)
p <- runif(50)
p.adjust(p, method = "bonferroni")
p
InputTSV <- system.file('extdata','maaslin_demo2.tsv', package="Maaslin")
InputConfig <-system.file('extdata','maaslin_demo2.read.config', package="Maaslin")
Maaslin(InputTSV,'maaslin_example_output',strInputConfig=InputConfig)
install.packages("agricolae")
install.packages(gam)
install.packages("gam")
install.packages("gamlss")
install.packages("gbm")
install.packages("glmnet")
install.packages("inlinedocs")
install.packages("logging")
install.packages("MASS")
install.packages("nlme")
install.packages("optparse")
install.packages("outliers")
install.packages("penalized")
install.packages("pscl")
install.packages("robustbase")
$ R CMD INSTALL Maaslin_0.0.4.tar.gz
CMD INSTALL Maaslin_0.0.4.tar.gz
R CMD INSTALL Maaslin_0.0.4.tar.gz
R.home()
[1]"/anaconda/lib/R"
install.packages("gamlss")
install.packages(c('agricolae','gam','gamlss','gbm','glmnet','inlinedocs','logging','MASS','nlme','optparse','outliers','penalized','pscl','robustbase'))
install.packages("gamlss")
install.packages(gamlss)
install.packages("gamlss.dist")
install.packages("~/Downloads/gamlss_5.0-2.tar", repos = NULL)
install.packages("~/Downloads/gamlss_5.0-2.tar", repos ="/Library/Frameworks/R.framework/Versions/3.2/Resources/library/" )
library(installr)
install.packages("installr")
library(installr)
install.packages("installr")
install.packages('installr')
require(devtools)
devtools::install_github('talgalili/installr')
library(installr)
updateR()
updateR()
if(!require("installr")) install.packages('installr')
library("installr")
updateR()
setInternet2(TRUE)
write.table(final_adonis_results, file="~/final_adonis_results.txt", sep= "\t", quote = F)
