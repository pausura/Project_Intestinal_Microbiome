list_variables_model1 <- paste(c(list_variables_model1), collapse=',' )
#If there are significative variables
if (nrow(variables_model2)>0) {
# Save names of the significative variables: create a new metadata table with these variables (model_table2)
matrix_variables_model2 <- as.data.frame(rownames(variables_model2))
rownames(matrix_variables_model2) <- matrix_variables_model2[,1]
t_model_table <- t(model_table)
list_variables_model2 <- as.vector(matrix_variables_model2$`rownames(variables_model2)`)
list_variables_model2 <- paste(c(list_variables_model2), collapse=', ' )
t_model_table2 <- merge(matrix_variables_model2, t_model_table, by = "row.names")
rownames(t_model_table2) <- t_model_table2[,1]
t_model_table2[1:2] <- NULL
model_table2 <- t(t_model_table2)
# Merge the new table with the taxonomy again (lost in the last merge)
model_table2 <- merge(taxonomy, model_table2, by = "row.names" )
row.names(model_table2) <- model_table2[,1]
model_table2 <- model_table2[,-1]
#Change taxonomy name
colnames(model_table2)[1] <- "Taxonomy"
# Change character to numeric
for (ii in 1:ncol(model_table2))  {
column_name2 <- colnames(model_table2)[ii]
for (jjj in 1:ncol(model_table)) {
column_name <- colnames(model_table)[jjj]
if (column_name == column_name2 & is.numeric(model_table[,jjj])) {
model_table2[,ii] <- as.numeric(as.character(model_table2[,ii]))
}
}
}
# Sort
#model_table2 <- model_table2[ , order(names(model_table2))]
## Calculate model2 with the new table: contains only the significative variables in anova test
model2 <- glm(Taxonomy ~ . , family = binomial(link="logit"), data = model_table2)
# Test the two models
anova_test <- anova(model, model2, test = "Chisq")
# Model 2 and model 1 are equal: save model 1 results
if (is.na(anova_test[2,5])) {
summary_table <- summary(model)
coefficients_table <- as.data.frame(summary_table$coefficients)
category1_samples <- subset(model_table, model_table[,2]==combination_list[aa,1])
nsum1 = nsum(category1_samples$Taxonomy)
nzsum1 = nzsum(category1_samples$Taxonomy)
category2_samples <- subset(model_table, model_table[,2]==combination_list[aa,2])
nsum2 = nsum(category2_samples$Taxonomy)
nzsum2 = nzsum(category2_samples$Taxonomy)
loop_matrix <- matrix(ncol = 9, nrow = nrow(coefficients_table))
colnames(loop_matrix) <- c("Taxonomy","presence_cat1", "absence_cat1", "presence_cat2", "absence_cat2", "Variable","effect","p_value", "Model")
a = 1
for (jj in 1:nrow(coefficients_table)) {
loop_matrix[a,1] = name_column
loop_matrix[a,2] = nsum1
loop_matrix[a,3] = nzsum1
loop_matrix[a,4] = nsum2
loop_matrix[a,5] = nzsum2
loop_matrix[a,6] = rownames(coefficients_table)[jj]
loop_matrix[a,7] = coefficients_table[jj,1]
loop_matrix[a,8] = coefficients_table[jj,4]
loop_matrix[a,9] = "model_1"
a <- a + 1
}
loop_matrix <- na.omit(loop_matrix)
loop_matrix1 <- loop_matrix
for (kk in 1:nrow(loop_matrix)) {
if (loop_matrix[kk,6]=="(Intercept)") {
loop_matrix1 <- loop_matrix[-kk,]
}
}
matrix_list[[x]] <- loop_matrix1
table_variables[x,1] = name_column
table_variables[x,2] = list_variables_model1
}
#Model 2 is not better than model 1: save model 1 results
else if (anova_test[2,5]<0.05) {
summary_table <- summary(model)
coefficients_table <- as.data.frame(summary_table$coefficients)
category1_samples <- subset(model_table, model_table[,2]==combination_list[aa,1])
nsum1 = nsum(category1_samples$Taxonomy)
nzsum1 = nzsum(category1_samples$Taxonomy)
category2_samples <- subset(model_table, model_table[,2]==combination_list[aa,2])
nsum2 = nsum(category2_samples$Taxonomy)
nzsum2 = nzsum(category2_samples$Taxonomy)
loop_matrix <- matrix(ncol = 9, nrow = nrow(coefficients_table))
colnames(loop_matrix) <- c("Taxonomy","presence_cat1", "absence_cat1", "presence_cat2", "absence_cat2", "Variable","effect","p_value", "Model")
a = 1
for (jj in 1:nrow(coefficients_table)) {
loop_matrix[a,1] = name_column
loop_matrix[a,2] = nsum1
loop_matrix[a,3] = nzsum1
loop_matrix[a,4] = nsum2
loop_matrix[a,5] = nzsum2
loop_matrix[a,6] = rownames(coefficients_table)[jj]
loop_matrix[a,7] = coefficients_table[jj,1]
loop_matrix[a,8] = coefficients_table[jj,4]
loop_matrix[a,9] = "model_1"
a <- a + 1
}
loop_matrix <- na.omit(loop_matrix)
loop_matrix1 <- loop_matrix
for (kk in 1:nrow(loop_matrix)) {
if (loop_matrix[kk,6]=="(Intercept)") {
loop_matrix1 <- loop_matrix[-kk,]
}
}
matrix_list[[x]] <- loop_matrix1
table_variables[x,1] = name_column
table_variables[x,2] = list_variables_model1
}
##Model 2 is better than model 1: save model 2 results
else {
summary_table2 <- summary(model2)
#Save coefficients results
coefficients_table <- as.data.frame(summary_table2$coefficients)
#Get number presence/absence of the taxonomy for each category
category1_samples <- subset(model_table, model_table[,2]==combination_list[aa,1])
nsum1 = nsum(category1_samples$Taxonomy)
nzsum1 = nzsum(category1_samples$Taxonomy)
category2_samples <- subset(model_table, model_table[,2]==combination_list[aa,2])
nsum2 = nsum(category2_samples$Taxonomy)
nzsum2 = nzsum(category2_samples$Taxonomy)
loop_matrix <- matrix(ncol = 9, nrow = nrow(coefficients_table))
colnames(loop_matrix) <- c("Taxonomy","presence_cat1", "absence_cat1", "presence_cat2", "absence_cat2", "Variable","effect","p_value", "Model")
a = 1
#Save in a new matrix:
for (jj in 1:nrow(coefficients_table)) {
loop_matrix[a,1] = name_column    #name taxonomy
loop_matrix[a,2] = nsum1          #presence taxonomy in category1
loop_matrix[a,3] = nzsum1         #absence taxonomy in category1
loop_matrix[a,4] = nsum2          #presence taxonomy in category2
loop_matrix[a,5] = nzsum2         #absence taxonomy in category2
loop_matrix[a,6] = rownames(coefficients_table)[jj]   #name of the variable
loop_matrix[a,7] = coefficients_table[jj,1]    #effect value
loop_matrix[a,8] = coefficients_table[jj,4]    #p_value
loop_matrix[a,9] = "model_2"
a <- a + 1
}
loop_matrix <- na.omit(loop_matrix)  #remove empty rows (NA values)
loop_matrix1 <- loop_matrix
for (kk in 1:nrow(loop_matrix)) {   #remove (Intercept) results
if (loop_matrix[kk,6]=="(Intercept)") {
loop_matrix1 <- loop_matrix[-kk,]
}
}
matrix_list[[x]] <- loop_matrix1   #Save the new matrix in a list of matrix
table_variables[x,1] = name_column
table_variables[x,2] = list_variables_model2
}
}
## If are not significative variables in anova test: keep model1 results
else {
summary_table <- summary(model)
coefficients_table <- as.data.frame(summary_table$coefficients)
category1_samples <- subset(model_table, model_table[,2]==combination_list[aa,1])
nsum1 = nsum(category1_samples$Taxonomy)
nzsum1 = nzsum(category1_samples$Taxonomy)
category2_samples <- subset(model_table, model_table[,2]==combination_list[aa,2])
nsum2 = nsum(category2_samples$Taxonomy)
nzsum2 = nzsum(category2_samples$Taxonomy)
loop_matrix <- matrix(ncol = 9, nrow = nrow(coefficients_table))
colnames(loop_matrix) <- c("Taxonomy","presence_cat1", "absence_cat1", "presence_cat2", "absence_cat2", "Variable","effect","p_value", "Model")
a = 1
for (jj in 1:nrow(coefficients_table)) {
loop_matrix[a,1] = name_column
loop_matrix[a,2] = nsum1
loop_matrix[a,3] = nzsum1
loop_matrix[a,4] = nsum2
loop_matrix[a,5] = nzsum2
loop_matrix[a,6] = rownames(coefficients_table)[jj]
loop_matrix[a,7] = coefficients_table[jj,1]
loop_matrix[a,8] = coefficients_table[jj,4]
loop_matrix[a,9] = "model_1"
a <- a + 1
}
loop_matrix <- na.omit(loop_matrix)
loop_matrix1 <- loop_matrix
for (kk in 1:nrow(loop_matrix)) {
if (loop_matrix[kk,6]=="(Intercept)") {
loop_matrix1 <- loop_matrix[-kk,]
}
}
matrix_list[[x]] <- loop_matrix1
table_variables[x,1] = name_column
table_variables[x,2] = list_variables_model1
}
#Save in the same matrix all the results
all_matrix <- as.data.frame(do.call(rbind, matrix_list))
colnames(table_variables) <- c("Taxonomy", "Variables")
write.table(table_variables, file = "./table_variables_logistic_regression.txt", sep = "\t", quote = F)
}
#Split by Variable
split_matrix <- split(all_matrix, all_matrix$Variable)
for (bb in 1:length(split_matrix)){
#Correct by p_values
matrix <- as.data.frame(split_matrix[bb])
p_value <- as.vector(matrix[,8])
corrected_pvalues <- p.adjust(p_value, method = "fdr")
#Add a new column with the new p_values
matrix <- cbind(matrix, corrected_pvalues)
name <- colnames(matrix)[6]
name <- paste(name, combination_list[aa,1], "vs", combination_list[aa,2], sep = "")
nc <- paste(name, ".txt", sep ="")
assign(nc, matrix)
final_name_matrix <- paste("./", nc, sep = "")
write.table(matrix, file = final_name_matrix, quote = F, sep = "\t")
## Filtering significant results
#Filter by the new p_values
filtered_matrix <- subset(matrix, matrix[,10]<0.05)
name2 <- colnames(filtered_matrix)[6]
name2 <- paste(name2, combination_list[aa,1],"vs",combination_list[aa,2], sep ="")
nc2 <- paste(name2, "_filtered.txt", sep ="")
assign(nc2, filtered_matrix)
final_name_matrix2 <- paste("./", nc2, sep = "")
#Not print empty tables
if (nrow(filtered_matrix)>0) {
write.table(filtered_matrix, file = final_name_matrix2, quote = F, sep = "\t" )
}
}
}
}
logistic_regression(metadata, taxonomy, 1)
summary_statistics_metadata <- function (metadata_input, category_table) {
# Packages needed
library (psych)  #describe r function
# Create other functions to calculate the different parameters
## Categorical values - create function to calculate the counts and the percentage for categorical variables
tblFun <- function(x) {
# Create a table
tbl <- table(x)
# Combine columnes/rows to get the counts and percentage (creates new table -> res)
res <- cbind(tbl,round(prop.table(tbl)*100,2))
# Give names to the columns
colnames(res) <- c('Count','Percentage')
res
}
## NA sum function - counts the number of NA
nzsum <- function(x) {
sum (is.na(x))
}
if (missing(category_table)) {
## Calculate table1 with the whole data:
my_results = matrix(ncol = 6, nrow = ncol(metadata_input))
for (k in 1:ncol(metadata_input)){
if (is.numeric(metadata_input[,k])) {
# Keep in "x" the result from describe function (done in the columns) - for each factor
x = describe(metadata_input[,k])
z = nzsum(metadata_input[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1] = "numerical"
my_results[k,2] = x$median
my_results[k,3] = x$mean
my_results[k,4] = x$sd
my_results[k,5] = x$n
my_results[k,6] = z
}
# Condition: if the column values are categorical
else {
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x = tblFun(metadata_input[,k])
z = nzsum(metadata_input[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[k,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[k,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[k,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[k,5]=sum(x[,1])
my_results[k,6]= z
}
}
# The column names from the original table = row names from the new table
rownames(my_results) = colnames(metadata_input)
# Give names to the columns of the new table
colnames(my_results) = c("Type", "Categories/Median", "Counts/Mean", "%/SD", "Number_non-zeros(n)", "Number_NA")
# Export the new table
write.table (my_results, file = "./total_metadata_table.txt" , quote = F, sep = "\t")
}
else {
# Merge metadata_table with category_table
metadata_input <- merge(category_table, metadata_input, by ="row.names")
# First column as rownames
rownames(metadata_input) <- metadata_input[,1]
metadata_input <- metadata_input[,-1]
# Create a new column to assign a number to each category
metadata_input$category <- as.integer(metadata_input[,1])
category_number <- nlevels(metadata_input[,1])
# Save the different categories files in the global environment
matrix_list <- list()
j = 1
# Loop for to subset the different variables by category
for (i in 1:category_number) {
category_matrix <- subset(metadata_input, metadata_input$category== i )
nam <- paste("Category", j , sep = "")
matrix_list[[j]] <-  assign(nam, category_matrix)
j <- j + 1
}
# Save in different matrix the variables for each category
for (ii in 1:category_number) {
new_matrix <- as.data.frame(matrix_list[[ii]])
my_results = matrix(ncol = 6, nrow = ncol(new_matrix))
# For each loop goes to the next column (numerical way)
for (iii in 1:ncol(new_matrix)) {
# Condition: if the column values are numerical/continuous
if (is.numeric(new_matrix[,iii])) {
# Keep in "x" the result from describe function (done in the columns) - for each factor
x = describe(new_matrix[,iii])
z = nzsum(new_matrix[,iii])
# In the new table ("x"): keep different values in the different columns
my_results[iii,1] = "numerical"
my_results[iii,2] = x$median
my_results[iii,3] = x$mean
my_results[iii,4] = x$sd
my_results[iii,5] = x$n
my_results[iii,6] = z
}
# Condition: if the column values are categorical
else {
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x = tblFun(new_matrix[,iii])
z = nzsum(new_matrix[,iii])
# In the new table ("x"): keep different values in the different columns
my_results[iii,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[iii,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[iii,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[iii,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[iii,5]=sum(x[,1])
my_results[iii,6]= z
}
}
# The column names from the original table = row names from the new table
rownames(my_results) = colnames(new_matrix)
# Give names to the columns of the new table
colnames(my_results) = c("Type", "Categories/Median", "Counts/Mean", "%/SD", "Number_non-zeros(n)", "Number_NA")
# Save the name of the variable to title the data.frame (table)
name_category <- new_matrix[1,1]
name_matrix <- paste(name_category, "_metadata_table1.txt", sep = "")
final_name_matrix <- paste("./", name_matrix, sep = "")
# Export the new table
write.table (my_results, file = final_name_matrix , quote = F, sep = "\t")
}
}
}
metadata <- read.table("~/Documents/Universitat/Holanda/Projecte/Metadata/filtered_metadata.txt", header = T, row.names = 1, sep = "\t", check.names = F)
View(metadata)
group <- read.table ("~/Documents/Universitat/Holanda/Projecte/anatomic_content_group.txt", sep = "\t", header = T, row.names = 1, check.names = F)
metadata <- merge(group, metadata, by = "row.names")
View(metadata)
rownames(metadata) <- metadata[,1]
View(metadata)
metadata <- metadata[,-1]
summary_statistics_metadata <- function (metadata_input, category_table) {
# Packages needed
library (psych)  #describe r function
# Create other functions to calculate the different parameters
## Categorical values - create function to calculate the counts and the percentage for categorical variables
tblFun <- function(x) {
# Create a table
tbl <- table(x)
# Combine columnes/rows to get the counts and percentage (creates new table -> res)
res <- cbind(tbl,round(prop.table(tbl)*100,2))
# Give names to the columns
colnames(res) <- c('Count','Percentage')
res
}
## NA sum function - counts the number of NA
nzsum <- function(x) {
sum (is.na(x))
}
if (missing(category_table)) {
## Calculate table1 with the whole data:
my_results = matrix(ncol = 6, nrow = ncol(metadata_input))
for (k in 1:ncol(metadata_input)){
if (is.numeric(metadata_input[,k])) {
# Keep in "x" the result from describe function (done in the columns) - for each factor
x = describe(metadata_input[,k])
z = nzsum(metadata_input[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1] = "numerical"
my_results[k,2] = x$median
my_results[k,3] = x$mean
my_results[k,4] = x$sd
my_results[k,5] = x$n
my_results[k,6] = z
}
# Condition: if the column values are categorical
else {
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x = tblFun(metadata_input[,k])
z = nzsum(metadata_input[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[k,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[k,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[k,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[k,5]=sum(x[,1])
my_results[k,6]= z
}
}
# The column names from the original table = row names from the new table
rownames(my_results) = colnames(metadata_input)
# Give names to the columns of the new table
colnames(my_results) = c("Type", "Categories/Median", "Counts/Mean", "%/SD", "Number_non-zeros(n)", "Number_NA")
# Export the new table
write.table (my_results, file = "./total_metadata_table.txt" , quote = F, sep = "\t")
}
else {
# Merge metadata_table with category_table
metadata_input <- merge(category_table, metadata_input, by ="row.names")
# First column as rownames
rownames(metadata_input) <- metadata_input[,1]
metadata_input <- metadata_input[,-1]
# Create a new column to assign a number to each category
metadata_input$category <- as.integer(metadata_input[,1])
category_number <- nlevels(metadata_input[,1])
# Save the different categories files in the global environment
matrix_list <- list()
j = 1
# Loop for to subset the different variables by category
for (i in 1:category_number) {
category_matrix <- subset(metadata_input, metadata_input$category== i )
nam <- paste("Category", j , sep = "")
matrix_list[[j]] <-  assign(nam, category_matrix)
j <- j + 1
}
# Save in different matrix the variables for each category
for (ii in 1:category_number) {
new_matrix <- as.data.frame(matrix_list[[ii]])
my_results = matrix(ncol = 6, nrow = ncol(new_matrix))
# For each loop goes to the next column (numerical way)
for (iii in 1:ncol(new_matrix)) {
# Condition: if the column values are numerical/continuous
if (is.numeric(new_matrix[,iii])) {
# Keep in "x" the result from describe function (done in the columns) - for each factor
x = describe(new_matrix[,iii])
z = nzsum(new_matrix[,iii])
# In the new table ("x"): keep different values in the different columns
my_results[iii,1] = "numerical"
my_results[iii,2] = x$median
my_results[iii,3] = x$mean
my_results[iii,4] = x$sd
my_results[iii,5] = x$n
my_results[iii,6] = z
}
# Condition: if the column values are categorical
else {
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x = tblFun(new_matrix[,iii])
z = nzsum(new_matrix[,iii])
# In the new table ("x"): keep different values in the different columns
my_results[iii,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[iii,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[iii,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[iii,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[iii,5]=sum(x[,1])
my_results[iii,6]= z
}
}
# The column names from the original table = row names from the new table
rownames(my_results) = colnames(new_matrix)
# Give names to the columns of the new table
colnames(my_results) = c("Type", "Categories/Median", "Counts/Mean", "%/SD", "Number_non-zeros(n)", "Number_NA")
# Save the name of the variable to title the data.frame (table)
name_category <- new_matrix[1,1]
name_matrix <- paste(name_category, "_metadata_table1.txt", sep = "")
final_name_matrix <- paste("./", name_matrix, sep = "")
# Export the new table
write.table (my_results, file = final_name_matrix , quote = F, sep = "\t")
}
}
}
summary_statistics_metadata(metadata)
total_metadata <- read.table("~/Documents/Universitat/Holanda/Projecte/Scripts/total_metadata_table.txt", header = T, row.names = 1, check.names = F, sep = "\t")
View(total_metadata)
colonic_metadata <- subset(metadata, metadata$Group=="colonic")
View(group)
p = list(c(group[,1]))
p
p = list(c(metadata[,1],metadata[,2],metadata[,3]))
p
intermediate_metadata <- subset(metadata, metadata$Group=="intermediate")
summary_statistics_metadata(metadata, group)
colonic_metadata <- read.table("~/Documents/Universitat/Holanda/Projecte/Scripts/colonic_metadata_table1.txt", header = T, row.names = 1, sep = "\t", check.names = F)
View(colonic_metadata)
intermediate_metadata <- read.table("~/Documents/Universitat/Holanda/Projecte/Scripts/intermediate_metadata_table1.txt", header = T, row.names = 1, sep = "\t", check.names = F)
ileal_metadata <- read.table("~/Documents/Universitat/Holanda/Projecte/Scripts/ileal_metadata_table1.txt", header = T, row.names = 1, sep = "\t", check.names = F)
total_metadata <- merge(total_metadata, colonic_metadata, by = "row.names")
View(total_metadata)
rownames(total_metadata) <- total_metadata[,1]
total_metadata <- total_metadata[,-1]
total_metadata <- merge(total_metadata, ileal_metadata, by = "row.names")
rownames(total_metadata) <- total_metadata[,1]
> total_metadata <- total_metadata[,-1]
total_metadata <- total_metadata[,-1]
total_metadata <- merge(total_metadata, intermediate_metadata, by = "row.names")
rownames(total_metadata) <- total_metadata[,1] total_metadata <- total_metadata[,-1]
rownames(total_metadata) <- total_metadata[,1]total_metadata <- total_metadata[,-1]
rownames(total_metadata) <- total_metadata[,1]
total_metadata <- total_metadata[,-1]
write.table(total_metadata, file = "./total_metadata.txt", sep = "\t", quote = F)
