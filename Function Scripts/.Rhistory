View(bacteroidetes)
bacteroidetes <- merge(bacteroidetes, intestinal_groups, by = "row.names")
rownames(bacteroidetes) <- bacteroidetes[,1]
bacteroidetes <- bacteroidetes[,-1]
name_column <- "k__Bacteria|p__Firmicutes"
firmicutes <- subset(filum_table, select = name_column)
firmicutes <- merge(firmicutes, intestinal_groups, by = "row.names")
rownames(firmicutes) <- firmicutes[,1]
firmicutes <- firmicutes[,-1]
name_column <- "k__Bacteria|p__Proteobacteria"
proteobacteria <- subset(filum_table, select = name_column)
name_column <- "k__Bacteria|p__Proteobacteria"
proteobacteria <- subset(filum_table, select = name_column)
proteobacteria <- merge(proteobacteria, intestinal_groups, by = "row.names")
rownames(proteobacteria) <- proteobacteria[,1]
proteobacteria <- proteobacteria[,-1]
View(proteobacteria)
View(actinobacteria)
intermediate_normal <- actinobacteria[!(actinobacteria$Group=="small intestine"),]
View(intermediate_normal)
in_actinobacteria <- wilcox.test(k__Bacteria|p__Actinobacteria ~ Group,  data = intermediate_normal, paired = FALSE)
colnames(actinobacteria)[1] <- "Taxonomy"
colnames(bacteroidetes)[1] <- "Taxonomy"
colnames(proteobacteria)[1] <- "Taxonomy"
colnames(firmicutes)[1] <- "Taxonomy"
intermediate_normal <- actinobacteria[!(actinobacteria$Group=="small intestine"),]
View(intermediate_normal)
colnames(actinobacteria)[1] <- "rel_abun"
colnames(bacteroidetes)[1] <- "rel_abun"
colnames(firmicutes)[1] <- "rel_abun"
colnames(proteobacteria)[1] <- "rel_abun"
intermediate_normal <- actinobacteria[!(actinobacteria$Group=="small intestine"),]
in_actinobacteria <- wilcox.test(rel_abun ~ Group,  data = intermediate_normal, paired = FALSE)
in_actinobacteria
intermediate_normal <- bacteroidetes[!(bacteroidetes$Group=="small intestine"),]
in_test <- wilcox.test(rel_abun ~ Group,  data = intermediate_normal, paired = FALSE)
in_test
intermediate_normal <- firmicutes[!(firmicutes$Group=="small intestine"),]
in_test <- wilcox.test(rel_abun ~ Group,  data = intermediate_normal, paired = FALSE)
in_test
intermediate_normal <- proteobacteria[!(proteobacteria$Group=="small intestine"),]
in_test <- wilcox.test(rel_abun ~ Group,  data = intermediate_normal, paired = FALSE)
in_test
normal_small <- actinobacteria[!(actinobacteria$Group == "intermediate"),]
ns_test <- wilcox.test(rel_abun ~ Group,  data = normal_small, paired = FALSE)
ns_test
normal_small <- bacteroidetes[!(bacteroidetes$Group == "intermediate"),]
ns_test <- wilcox.test(rel_abun ~ Group,  data = normal_small, paired = FALSE)
ns_test
normal_small <- firmicutes[!(firmicutes$Group == "intermediate"),]
ns_test <- wilcox.test(rel_abun ~ Group,  data = normal_small, paired = FALSE)
ns_test
normal_small <- proteobacteria[!(proteobacteria$Group == "intermediate"),]
ns_test <- wilcox.test(rel_abun ~ Group,  data = normal_small, paired = FALSE)
ns_test
intermediate_small <- actinobacteria[!(actinobacteria$Group=="normal"),]
is_test <- wilcox.test(rel_abun ~Group, data = intermediate_small, paired = FALSE)
is_test
intermediate_small <- firmicutes[!(firmicutes$Group=="normal"),]
is_test <- wilcox.test(rel_abun ~Group, data = intermediate_small, paired = FALSE)
is_test
intermediate_small <- bacteroidetes[!(bacteroidetes$Group=="normal"),]
is_test <- wilcox.test(rel_abun ~Group, data = intermediate_small, paired = FALSE)
is_test
intermediate_small <- proteobacteria[!(proteobacteria$Group=="normal"),]
is_test <- wilcox.test(rel_abun ~Group, data = intermediate_small, paired = FALSE)
is_test
is_test$p.value
p.adjust(is_test$p.value, method = "fdr")
taxonomy_table <- read.table("~/Documents/Universitat/Holanda/Projecte/filtered_tax_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
t_tax_table <- as.data.frame(t(taxonomy_table))
loop_table <- as.data.frame(matrix(nrow = nrow(t_tax_table) , ncol = ncol(t_tax_table)))
for (i in 1:nrow(t_tax_table)) {
# If the taxonomy has the desired number of levels:
if (count.fields(textConnection(row.names(t_tax_table[i,])), sep="|") == taxonomy_level){
#print (paste0("Species found: ", row.names(tax_table[i,]))) ##Loop check
# Only the rows that meet the condition are filled, the rest get NA values
loop_table[i,] = t_tax_table[i,]
}
}
taxonomy_level = 7
View(t_tax_table)
for (i in 1:nrow(t_tax_table)) {
# If the taxonomy has the desired number of levels:
if (count.fields(textConnection(row.names(t_tax_table[i,])), sep="|") == taxonomy_level){
#print (paste0("Species found: ", row.names(tax_table[i,]))) ##Loop check
# Only the rows that meet the condition are filled, the rest get NA values
loop_table[i,] = t_tax_table[i,]
}
}
row.names(loop_table) = row.names(t_tax_table)
colnames(loop_table) = colnames(t_tax_table)
level_table <- na.omit(loop_table)
View(level_table)
rownames(level_table)[1]
for (i in 1:nrow(level_table)){
name_taxonomy <- rownames(level_table)[i]
new_taxonomy_name <- unlist(strsplit(name_taxonomy, split = "|", fixed= TRUE))[taxonomy_level]
rownames(level_table)[i] <- new_taxonomy_name
}
View(level_table)
species_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/species_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
intestinal_groups <- read.table("~/Documents/Universitat/Holanda/Projecte/intestinal_groups.txt", sep = "\t", header = T, row.names = 1)
taxonomy_level_table <- species_table
taxonomy_level_table <- species_table
group_table <- intestinal_groups
View(level_table)
category_table <- intestinal_groups
library(vegan)
library(ggplot2)
alpha <- as.data.frame(diversity(taxonomy_level_table, index="shannon"))
colnames(alpha)[1] <- "alpha_diversity"
my_table <- merge(category_table, alpha, by="row.names")
rownames(my_table) <- my_table[,1]
my_table <- my_table[,-1]
category_number <- nlevels(my_table[,1]) #First column because in merge the category table is the first one
my_table$category <- as.integer(my_table[,1])
my_table$color = "none"
my_palette <- matrix(brewer.pal(category_number,"Set1"))
library(RColorBrewer)
my_palette <- matrix(brewer.pal(category_number,"Set1"))
for (i in 1:category_number){
my_table[my_table$category == i,]$color = my_palette[i,1]
}
shannon_plot <- ggplot(my_table, aes(x=category, y=alpha_diversity, fill = my_table$color)) + labs (y="Shannon Diversity Index", x="Category") + geom_violin(trim=FALSE) + geom_boxplot(width = 0.1) + theme_classic() + theme(legend.position="none") + theme(axis.text.x = element_text(hjust = 1, size=16,color="black")) + scale_color_identity("All_categories", breaks = my_table$color, labels= my_table$category, guide = "legend")
pdf("shannon_plot.pdf")
print(shannon_plot)
dev.off()
tax_table <- read.table("~/Documents/Universitat/Holanda/Projecte/filtered_tax_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
taxonomy_abundance(tax_table,0.01,15)
species_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/species_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
species_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes_old/species_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
View(species_table)
category_table <- read.table("~/Documents/Universitat/Holanda/Projecte/intestinal_content_group.txt", header = T, sep = "\t", row.names = 1, check.names = F)
View(category_table)
shannon_index_function <- function(taxonomy_level_table, category_table) {
##Required packages - shannon diversity/ggplot
library(vegan)
library(ggplot2)
library(RColorBrewer)
## Calculate shannon index (alpha) for each sample in the taxonomy file: diversity function from vegan package
alpha <- as.data.frame(diversity(taxonomy_level_table, index="shannon"))
colnames(alpha)[1] <- "alpha_diversity"
## Divide alpha results by categories
# Merge alpha with category table
my_table <- merge(category_table, alpha, by="row.names")
rownames(my_table) <- my_table[,1]
my_table <- my_table[,-1]
# Calculate the number of categories
category_number <- nlevels(my_table[,1]) #First column because in merge the category table is the first one
# Create a new column to assign a number to each category
my_table$category <- as.integer(my_table[,1])
# Create a new column to colour the plot depending on the category (level)
my_table$color = "none"
# Create a palette of colors depending on the number of categories
my_palette <- matrix(brewer.pal(category_number,"Set1"))
# For loop to assign one different color to each different category in the new color column
for (i in 1:category_number){
my_table[my_table$category == i,]$color = my_palette[i,1]
}
### Create a violin plot
shannon_index_plot <- ggplot(my_table, aes(x=category, y=alpha_diversity, fill = my_table$color)) + labs (y="Shannon Diversity Index", x="Category") + geom_violin(trim=FALSE) + geom_boxplot(width = 0.1) + theme_classic() + theme(legend.position="none") + theme(axis.text.x = element_text(hjust = 1, size=16,color="black")) + scale_color_identity("All_categories", breaks = my_table$color, labels= my_table$category, guide = "legend")
##Save the plot as pdf.file
pdf("shannon_plot.pdf")
print(shannon_plot)
dev.off()
}
shannon_index_function(taxonomy_level_table, category_table)
shannon_index_function <- function(taxonomy_level_table, category_table) {
##Required packages - shannon diversity/ggplot
library(vegan)
library(ggplot2)
library(RColorBrewer)
## Calculate shannon index (alpha) for each sample in the taxonomy file: diversity function from vegan package
alpha <- as.data.frame(diversity(taxonomy_level_table, index="shannon"))
colnames(alpha)[1] <- "alpha_diversity"
## Divide alpha results by categories
# Merge alpha with category table
my_table <- merge(category_table, alpha, by="row.names")
rownames(my_table) <- my_table[,1]
my_table <- my_table[,-1]
# Calculate the number of categories
category_number <- nlevels(my_table[,1]) #First column because in merge the category table is the first one
# Create a new column to assign a number to each category
my_table$category <- as.integer(my_table[,1])
# Create a new column to colour the plot depending on the category (level)
my_table$color = "none"
# Create a palette of colors depending on the number of categories
my_palette <- matrix(brewer.pal(category_number,"Set1"))
# For loop to assign one different color to each different category in the new color column
for (i in 1:category_number){
my_table[my_table$category == i,]$color = my_palette[i,1]
}
### Create a violin plot
shannon_index_plot <- ggplot(my_table, aes(x=category, y=alpha_diversity, fill = my_table$color)) + labs (y="Shannon Diversity Index", x="Category") + geom_violin(trim=FALSE) + geom_boxplot(width = 0.1) + theme_classic() + theme(legend.position="none") + theme(axis.text.x = element_text(hjust = 1, size=16,color="black")) + scale_color_identity("All_categories", breaks = my_table$color, labels= my_table$category, guide = "legend")
##Save the plot as pdf.file
pdf("shannon_plot.pdf")
print(shannon_plot)
dev.off()
}
shannon_index_function(species_table, category_table)
shannon_index_function <- function(taxonomy_level_table, category_table) {
##Required packages - shannon diversity/ggplot
library(vegan)
library(ggplot2)
library(RColorBrewer)
## Calculate shannon index (alpha) for each sample in the taxonomy file: diversity function from vegan package
alpha <- as.data.frame(diversity(taxonomy_level_table, index="shannon"))
colnames(alpha)[1] <- "alpha_diversity"
## Divide alpha results by categories
# Merge alpha with category table
my_table <- merge(category_table, alpha, by="row.names")
rownames(my_table) <- my_table[,1]
my_table <- my_table[,-1]
# Calculate the number of categories
category_number <- nlevels(my_table[,1]) #First column because in merge the category table is the first one
# Create a new column to assign a number to each category
my_table$category <- as.integer(my_table[,1])
# Create a new column to colour the plot depending on the category (level)
my_table$color = "none"
# Create a palette of colors depending on the number of categories
my_palette <- matrix(brewer.pal(category_number,"Set1"))
# For loop to assign one different color to each different category in the new color column
for (i in 1:category_number){
my_table[my_table$category == i,]$color = my_palette[i,1]
}
### Create a violin plot
shannon_index_plot <- ggplot(my_table, aes(x=category, y=alpha_diversity, fill = my_table$color)) + labs (y="Shannon Diversity Index", x="Category") + geom_violin(trim=FALSE) + geom_boxplot(width = 0.1) + theme_classic() + theme(legend.position="none") + theme(axis.text.x = element_text(hjust = 1, size=16,color="black")) + scale_color_identity("All_categories", breaks = my_table$color, labels= my_table$category, guide = "legend")
##Save the plot as pdf.file
pdf("shannon_plot.pdf")
print(shannon_index_plot)
dev.off()
}
shannon_index_function(species_table, category_table)
alpha <- as.data.frame(diversity(species_table,index="shannon"))
View(alpha)
alpha_shannon <- write.table(alpha, file = "~/alpha_diversity_DUDes.txt", quote = F, sep="\t")
intestinal_groups <- read.table("~/Documents/Universitat/Holanda/Projecte/intestinal_content_group.txt", sep = "\t", header = T, row.names = 1)
group_taxa <- merge(intestinal_groups, alpha, by="row.names")
rownames(group_taxa) <- group_taxa[,1]
group_taxa2 <- group_taxa[,-1]
colnames(group_taxa2)[2] <- "diversity"
group_taxa2$Group2="none"
group_taxa2[group_taxa2$Group=="normal",]$Group2="1_normal"
group_taxa2[group_taxa2$Group=="intermediate",]$Group2="2_intermediate"
group_taxa2[group_taxa2$Group=="small intestine",]$Group2="3_small_intestine"
violin_plot <- ggplot(group_taxa2, aes(x=group_taxa2$Group2, y=group_taxa2$diversity, fill=group_taxa2$Group2)) + labs (y="Shannon Diversity Index", x="Group") + geom_violin(trim=FALSE) + geom_boxplot(width = 0.1) + scale_fill_manual(values=c("black","#2F2BFF","red")) + theme_classic() + theme(legend.position="none") + theme(axis.text.x = element_text(hjust = 1, size=16,color="black"))
violin_plot
ggplot(group_taxa2, aes(x=group_taxa2$Group2, y=group_taxa2$diversity, fill=group_taxa2$Group2)) + labs (y="Shannon Diversity Index", x="Group") + geom_violin(trim=FALSE) + geom_boxplot(width = 0.1) + scale_fill_manual(values=c("black","#2F2BFF","red")) + theme_classic() + theme(legend.position="none") + theme(axis.text.x = element_text(hjust = 1, size=16,color="black"))
dev.off()
violin_plot <- ggplot(group_taxa2, aes(x=group_taxa2$Group2, y=group_taxa2$diversity, fill=group_taxa2$Group2)) + labs (y="Shannon Diversity Index", x="Group") + geom_violin(trim=FALSE) + geom_boxplot(width = 0.1) + scale_fill_manual(values=c("black","#2F2BFF","red")) + theme_classic() + theme(legend.position="none") + theme(axis.text.x = element_text(hjust = 1, size=16,color="black"))
violin_plot
tax_table <- read.table("~/Documents/Universitat/Holanda/Projecte/filtered_tax_DUDes.txt", sep = "\t", header = T, row.names = 1)
intestinal_categories <- read.table("~/Documents/Universitat/Holanda/Projecte/intestinal_content_group.txt", sep="\t", header = T, row.names = 1)
total_data <- merge(intestinal_categories, tax_table, by="row.names")
rownames(total_data) <- total_data[,1]
total_data <- total_data[,-1]
table_normal <- subset(total_data,total_data$Group=="normal")
table_normal <- table_normal[,-1]
table_intermediate <- subset(total_data, total_data$Group=="intermediate")
table_intermediate <- table_intermediate[,-1]
table_smallintestine <- subset(total_data, total_data$Group=="small intestine")
table_smallintestine <- table_smallintestine[,-1]
total_data$Group <- NULL
nzmean <- function(x){
mean(x[x!=0])
}
nzsum <- function(x){
sum (x==0)
}
nsum <- function(x){
sum (x!=0)
}
my_results=matrix(ncol = 4, nrow=ncol(total_data))
for (i in 1:ncol(total_data)) {
x = nzmean(total_data[,i])
y = mean(total_data[,i])
z = nzsum(total_data[,i])
a = nsum(total_data[,i])
my_results[i,1] = x
my_results[i,2] = y
my_results[i,3] = z
my_results[i,4] = a
}
rownames(my_results) = colnames(total_data)
colnames(my_results) = c("Non-zero mean (I)", "Mean (I)", "Nº of 0 (I)", "Nº of non-0 (I)")
results_normal <- as.data.frame(my_results)
results_normal[is.na(results_normal)] <- 0
results_intermediate <- as.data.frame(my_results)
results_intermediate[is.na(results_intermediate)] <- 0
results_smallintestine <- as.data.frame(my_results)
results_smallintestine[is.na(results_smallintestine)] <- 0
results_total <- as.data.frame(my_results)
results_total[is.na(results_total)] <- 0
abundance_normal_intermediate <- merge(results_normal, results_intermediate, by="row.names")
rownames(abundance_normal_intermediate) <- abundance_normal_intermediate[,1]
abundance_normal_intermediate <- abundance_normal_intermediate[,-1]
abundance_groups <- merge(abundance_normal_intermediate, results_smallintestine, by="row.names")
rownames(abundance_groups) <- abundance_groups[,1]
abundance_groups <- abundance_groups[,-1]
abundance_results <- write.table(abundance_groups, file = "~/abundance_per_groups.txt", quote = F, sep = "\t")
total_abundance_results <- write.table(results_total, file = "~/abundance_total.txt", quote = F, sep = "\t")
intestinal_groups <- read.table("~/Documents/Universitat/Holanda/Projecte/intestinal_content_group.txt", sep = "\t", header = T, row.names = 1)
filum_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes_old/filum_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
filum_table <- read.table("~/DUDes_results/filum_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
filum_groups <- merge(filum_table, intestinal_groups, by = "row.names")
rownames(filum_groups) <- filum_groups[,1]
filum_groups <- filum_groups[,-1]
library(psych)
intermediate_filum <- subset(filum_groups, filum_groups$Group=="intermediate")
intermediate_filum <- intermediate_filum[,-13]
resum_intermediate <- describe(intermediate_filum)
top4_table_intermediate <- resum_intermediate[order(resum_intermediate$mean, decreasing = T)[1:4],]
sum_top4_intermediate <- sum(top4_table_intermediate$mean)
others_intermediate <- (100-sum_top4_intermediate)
intermediate_results <- subset(top4_table_intermediate, select = "mean")
colnames(intermediate_results) <- "Intermediate"
intermediate_results <- rbind(intermediate_results, others_intermediate)
rownames(intermediate_results)[5] <- "others"
normal_filum <- subset(filum_groups, filum_groups$Group=="normal")
normal_filum <- normal_filum[,-13]
resum_normal <- describe(normal_filum)
top4_table_normal <- resum_normal[order(resum_normal$mean, decreasing = T)[1:4],]
sum_top4_normal <- sum(top4_table_normal$mean)
others_normal <- (100-sum_top4_normal)
normal_results <- subset(top4_table_normal, select = "mean")
colnames(normal_results) <- "Normal"
normal_results <- rbind(normal_results, others_normal)
rownames(normal_results)[5] <- "others"
small_filum <- subset(filum_groups, filum_groups$Group=="small intestine")
small_filum <- small_filum[,-13]
resum_small <- describe(small_filum)
top4_table_small <- resum_small[order(resum_small$mean, decreasing = T)[1:4],]
sum_top4_small <- sum(top4_table_small$mean)
others_small <- (100-sum_top4_small)
small_results <- subset(top4_table_small, select = "mean")
colnames(small_results) <- "Small_Intestine"
small_results <- rbind(small_results, others_small)
rownames(small_results)[5] <- "others"
normal_intermediate <- merge(normal_results, intermediate_results, by="row.names")
rownames(normal_intermediate) <- normal_intermediate[,1]
normal_intermediate <- normal_intermediate[,-1]
filum_group_table <- merge(normal_intermediate, small_results, by = "row.names")
rownames(filum_group_table) <- filum_group_table[,1]
filum_group_table <- filum_group_table[,-1]
library(reshape2)
library(ggplot2)
filum_group_table$bacteria=row.names(filum_group_table)
row.names(filum_group_table)=NULL
my_table=melt(filum_group_table)
filum_plot <- ggplot (my_table, aes(x=variable, y=value)) + geom_bar (aes(fill = bacteria), stat = "identity") + theme_classic() + xlab("Group") + ylab("relative_abundance")
filum_plot
species_table <- read.table("~/DUDes_results/species_table_DUDes.txt", sep = "\t", header = T, row.names = 1)
reads_table <- read.table("~/Documents/Universitat/Holanda/Projecte/reads_over_10M.txt", sep = "\t", header = T, row.names = 1)
View(reads_table)
reads_table$IBDFEC <- NULL
alpha <- as.data.frame(diversity(species_table,index="shannon"))
View(alpha)
intestinal_groups <- read.table("~/Documents/Universitat/Holanda/Projecte/intestinal_content_group.txt", sep="\t", header = T, row.names = 1)
filum_table <- read.table("~/DUDes_results/filum_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
beta <- vegdist(species_table, method="bray")
my_pcoa <- as.data.frame(cmdscale(beta, k = 4))
colnames(my_pcoa)[1:4] <- c("PCoA1","PCoA2","PCoA3","PCoA4")
pcoa_table <- write.table(my_pcoa, file="~/filtered_pcoa_table_DUDes.txt", quote = F, sep = "\t")
plot_table1 <- merge(filum_table, my_pcoa, by="row.names")
rownames(plot_table1) <- plot_table1[,1]
plot_table1 <- plot_table1[,-1]
plot_table2 <- merge(plot_table1, intestinal_groups, by="row.names")
rownames(plot_table2) <- plot_table2[,1]
plot_table2 <- plot_table2[,-1]
plot_table3 <- merge(plot_table2, alpha, by="row.names")
rownames(plot_table3) <- plot_table3[,1]
plot_table3 <- plot_table3[,-1]
final_plot_table <- merge(plot_table3, reads_table, by = "row.names")
rownames(final_plot_table) <- final_plot_table[,1]
final_plot_table <- final_plot_table[,-1]
final_table <- write.table(final_plot_table, file = "~/filtered_final_pcoa_table.txt", quote = F, sep= "\t")
my_col=c("#0000FF","#62A4D1","#5BE55B","#FFF000", "#FF0000")
a_plot <- ggplot (final_plot_table, aes(x=PCoA1, y=PCoA2, geom="blank", colour=final_plot_table$`k__Bacteria|p__Actinobacteria`)) + geom_point () + scale_color_gradientn(colours = my_col, "Actinobacteria") + theme_classic() + labs(x="PCoA1", y="PCoA2")
a_plot
View(final_plot_table)
a_plot <- ggplot (final_plot_table, aes(x=PCoA1, y=PCoA2, geom="blank", colour=final_plot_table$p__Actinobacteria)) + geom_point () + scale_color_gradientn(colours = my_col, "Actinobacteria") + theme_classic() + labs(x="PCoA1", y="PCoA2")
a_plot
b_plot <- ggplot (final_plot_table, aes(x=PCoA1, y= PCoA2, geom = "blank", colour = final_plot_table$p__Bacteroidetes)) + geom_point() + scale_color_gradientn(colours = my_col, "Bacteroidetes") + theme_classic() + labs(x = "PCoA1", y="PCoA2")
b_plot
f_plot <- ggplot (final_plot_table, aes(x=PCoA1, y= PCoA2, geom = "blank", colour = final_plot_table$p__Firmicutes)) + geom_point() + scale_color_gradientn(colours = my_col, "Firmicutes") + theme_classic() + labs(x = "PCoA1", y = "PCoA2")
f_plot
my_col2 <- c("#000080","#00ffff")
si_plot <- ggplot(final_plot_table, aes(x=PCoA1, y=PCoA2, geom = "blank", colour = final_plot_table$`diversity(t_species_table, index = "shannon")`)) + geom_point() + scale_color_gradientn(colours = my_col2, "Shannon Index") + theme_classic() + labs(x = "PCoA1", y = "PCoA2")
si_plot
View(final_plot_table)
si_plot <- ggplot(final_plot_table, aes(x=PCoA1, y=PCoA2, geom = "blank", colour = final_plot_table$`diversity(species_table, index = "shannon")`)) + geom_point() + scale_color_gradientn(colours = my_col2, "Shannon Index") + theme_classic() + labs(x = "PCoA1", y = "PCoA2")
si_plot
final_plot_table$color="black"
final_plot_table[final_plot_table$Reads<10000000,]$color="red"
reads_plot <- ggplot (final_plot_table, aes(x=PCoA1, y=PCoA2, geom="blank", colour=final_plot_table$color)) + geom_point () + scale_color_identity("Reads", breaks=final_plot_table$color, labels=final_plot_table$color, guide = "legend") + theme_classic() + labs(x="PCoA1", y="PCoA2")
reads_plot
final_plot_table$color="none"
final_plot_table[final_plot_table$Group=="normal",]$color="black"
final_plot_table[final_plot_table$Group=="intermediate",]$color="#2F2BFF"
final_plot_table[final_plot_table$Group=="small intestine",]$color="red"
total_groups_plot <- ggplot (final_plot_table, aes(x=PCoA1, y=PCoA2, geom="blank", colour=color)) + geom_point () + scale_color_identity("Microbiome", breaks=final_plot_table$color, labels=final_plot_table$Group, guide = "legend") + theme_classic() + labs(x="PCoA1", y="PCoA2")
total_groups_plot
final_plot_table[final_plot_table$Group=="normal",]$color="#ffa500"
final_plot_table[final_plot_table$Group=="intermediate",]$color="black"
final_plot_table[final_plot_table$Group=="normal",]$color="#ffa500"
final_plot_table[final_plot_table$Group=="intermediate",]$color="black"
final_plot_table[final_plot_table$Group=="small intestine",]$color="black"
normal_plot <- ggplot (final_plot_table, aes(x=PCoA1, y=PCoA2, geom="blank", colour=color)) + geom_point () + scale_color_identity("Microbiome", breaks=final_plot_table$color, labels=final_plot_table$Group, guide = "legend") + theme_classic() + labs(x="PCoA1", y="PCoA2")
normal_plot
final_plot_table[final_plot_table$Group=="normal",]$color="black"
final_plot_table[final_plot_table$Group=="intermediate",]$color="#ffa500"
final_plot_table[final_plot_table$Group=="small intestine",]$color="black"
intermediate_plot <- ggplot (final_plot_table, aes(x=PCoA1, y=PCoA2, geom="blank", colour=color)) + geom_point () + scale_color_identity("Microbiome", breaks=final_plot_table$color, labels=final_plot_table$Group, guide = "legend") + theme_classic() + labs(x="PCoA1", y="PCoA2")
intermediate_plot
final_plot_table[final_plot_table$Group=="normal",]$color="black"
final_plot_table[final_plot_table$Group=="intermediate",]$color="black"
final_plot_table[final_plot_table$Group=="small intestine",]$color="#ffa500"
smallintestine_plot <- ggplot (final_plot_table, aes(x=PCoA1, y=PCoA2, geom="blank", colour=color)) + geom_point () + scale_color_identity("Microbiome", breaks=final_plot_table$color, labels=final_plot_table$Group, guide = "legend") + theme_classic() + labs(x="PCoA1", y="PCoA2")
smallintestine_plot
beta <- vegdist(species_table, method="bray")
caver <- hclust(beta, method="aver")
caver1 <- reorder.hclust(caver, beta)
library(vegan)
library(gclus)
library(data.table)
caver1 <- reorder.hclust(caver, beta)
order_caver1 = as.data.frame(caver1$labels[c(caver1$order)])
setDT(order_caver1, keep.rownames = TRUE)[]
colnames(order_caver1)[1] <- "num"
colnames(order_caver1)[2] <- "ID"
category_table$ID <- rownames(category_table)
intestinal_groups$ID <- rownames(category_table)
intestinal_groups$ID <- rownames(intestinal_groups)
order_cat <- merge(category_table, order_caver1, by="ID")
order_cat <- merge(intestinal_groups, order_caver1, by="ID")
rownames(order_cat) <- order_cat[,1]
order_cat <- order_cat[,-1]
order_cat$category <- as.integer(order_cat[,1])
order_cat$color = "none"
my_palette <- matrix(brewer.pal(category_number,"Paired"))
View(order_cat)
order_cat$color = "none"
order_cat[order_cat$Group=="normal"]$color = "black"
order_cat$color ="none"
order_cat[order_cat$Group=="normal",]$color = "#B0B2B3"
order_cat[order_cat$Group=="small intestine",]$color = "red"
order_cat[order_cat$Group=="intermediate",]$color = "#2F2BFF"
order_cat$values <- "5"
order_cat$values <- as.numeric(as.character(order_cat$values))
order_cat1 <- order_cat[order(as.numeric(order_cat$num)),]
par(mfrow=c(2,1), oma = c(5,4,0,0) + 0.1, mar = c(0,0,1,1) + 0.1)
plot(caver1, hang=-1, labels = FALSE, axes = FALSE, ylab = "", xlab="", sub="")
cluster_dendrogram <- barplot(order_cat1$values, col=order_cat1$color, border = NA, yaxt="n")
reads_table <- read.table("~/Documents/Universitat/Holanda/Projecte/reads_over_10M.txt", sep = "\t", header = T)
species_results=as.data.frame(matrix(ncol = 1, nrow=ncol(species_table)))
nsum <- function(x){
sum (x!=0)  }
for (i in 1:ncol(species_table)) {
a = nsum(species_table[,i])
species_results[i,1] = a
}
colnames(species_results) = c("Nº of species")
rownames(species_results) = colnames(species_table)
sp_results <- write.table(species_results, file = "~/filtered_species_results_DUDes.txt", quote = F, sep = "\t")
species_results$IBDFEC <- rownames(species_results)
alpha$IBDFEC <- rownames(alpha)
MyMerge <- function(x, y){
df <- merge(x, y, by= "IBDFEC", all.x= TRUE, all.y= TRUE)
return(df)
}
sample_table <- Reduce(MyMerge, list(diversity_table, species_results, reads_table))
sample_table <- Reduce(MyMerge, list(alpha, species_results, reads_table))
species_results$IBDFEC <- rownames(species_results)
sample_table <- Reduce(MyMerge, list(alpha, species_results, reads_table))
reads_table$IBDFEC = rownames(reads_table)
sample_table <- Reduce(MyMerge, list(alpha, species_results, reads_table))
rownames(sample_table) <- sample_table[,1]
sample_table <- sample_table[,-1]
View(sample_table)
reads_table <- read.table("~/Documents/Universitat/Holanda/Projecte/reads_over_10M.txt", sep = "\t", header = T)
View(reads_table)
reads_table <- read.table("~/Documents/Universitat/Holanda/Projecte/reads_over_10M.txt", sep = "\t", header = T)
View(reads_table)
colnames(reads_table)[1:2] = c("IBDFEC", "Reads")
View(reads_table)
View(species_results)
species_results=as.data.frame(matrix(ncol = 1, nrow=ncol(species_table)))
nsum <- function(x){
sum (x!=0)  }
species_table <- t(species_table)
species_results=as.data.frame(matrix(ncol = 1, nrow=ncol(species_table)))
nsum <- function(x){
sum (x!=0)  }
for (i in 1:ncol(species_table)) {
a = nsum(species_table[,i])
species_results[i,1] = a
}
colnames(species_results) = c("Nº of species")
rownames(species_results) = colnames(species_table)
sp_results <- write.table(species_results, file = "~/filtered_species_results_DUDes.txt", quote = F, sep = "\t")
species_results$IBDFEC <- rownames(species_results)
diversity_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/alpha_diversity_DUDes.txt", sep = "\t", header = T, row.names = 1)
alpha$IBDFEC <- rownames(alpha)
MyMerge <- function(x, y){
df <- merge(x, y, by= "IBDFEC", all.x= TRUE, all.y= TRUE)
return(df)
}
sample_table <- Reduce(MyMerge, list(alpha, species_results, reads_table))
rownames(sample_table) <- sample_table[,1]
sample_table <- sample_table[,-1]
merge_results <- write.table(sample_table, file = "~/filtered_sample_parameters_DUDes.txt", quote = F, sep = "\t")
