species_results=as.data.frame(matrix(ncol = 1, nrow=ncol(species_table)))
nsum <- function(x){
sum (x!=0)  }
for (i in 1:ncol(species_table)) {
a = nsum(species_table[,i])
species_results[i,1] = a
}
colnames(species_results) = c("Nº of species")
rownames(species_results) = colnames(species_table)
sp_results <- write.table(species_results, file = "~/filtered_species_results_DUDes.txt", quote = F, sep = "\t")
species_results$IBDFEC <- rownames(species_results)
diversity_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/alpha_diversity_DUDes.txt", sep = "\t", header = T, row.names = 1)
alpha$IBDFEC <- rownames(alpha)
MyMerge <- function(x, y){
df <- merge(x, y, by= "IBDFEC", all.x= TRUE, all.y= TRUE)
return(df)
}
sample_table <- Reduce(MyMerge, list(alpha, species_results, reads_table))
rownames(sample_table) <- sample_table[,1]
sample_table <- sample_table[,-1]
merge_results <- write.table(sample_table, file = "~/filtered_sample_parameters_DUDes.txt", quote = F, sep = "\t")
tax_table <- read.table("~/Documents/Universitat/Holanda/Projecte/filtered_tax_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
filtering_taxonomy(tax_table,0.01,15)
filtering_taxonomy <- function(taxonomy_table,abundance_value,individuals_value) {
##Function to calculate mean excluding 0 values
nzmean <- function(a){
mean(a[a!=0])
}
##Function to calculate nº of 0
zsum <- function(a){
sum (a==0)
}
##Function to calculate nº of non-0
nsum <- function(a){
sum (a!=0)
}
my_results=matrix(ncol = 4, nrow=ncol(taxonomy_table))
## Loop for each column (taxonomy) in the taxonomy table
for (i in 1:ncol(taxonomy_table)) {
#Calculate mean for each column
aa = mean(taxonomy_table[,i])
#Calculate number of non-zeros (individuals)
bb = nsum(taxonomy_table[,i])
#Calculate mean without taking into account the 0
cc = nzmean(taxonomy_table[,i])
#Calculate number of zeros
dd = zsum(taxonomy_table[,i])
my_results[i,1] = aa
my_results[i,2] = bb
my_results[i,3] = cc
my_results[i,4] = dd
}
# The column names from the original table = row names from the new table
rownames(my_results) = colnames(taxonomy_table)
# Give names to the columns of the new table
colnames(my_results) = c("Mean","N_of_non-0", "Non-0_Mean", "N_of_0")
tax_parameters <- as.data.frame(my_results)
tax_parameters[is.na(tax_parameters)] <- 0
write.table(tax_parameters, file="~/summary_taxonomy_filtering.txt", sep = "\t", quote=F)
##Filtering by ABUNDANCE or N_OF_0
##Remove mean rows with less than 0.01% values OR less than 15 individuals (non_0)
filtered_taxonomy <- tax_parameters[!(tax_parameters$Mean<abundance_value) & !(tax_parameters$`N_of_non-0`<individuals_value), , FALSE]
#Remove non-necessary columns
filtered_taxonomy[2:4] <- NULL
##Transpose the taxonomy_table to merge
t_taxonomy_table <- as.data.frame(t(taxonomy_table))
#Merge both tables <- only the rows in common are in the new table
t_filtered_taxonomy_table <- merge(filtered_taxonomy, t_taxonomy_table, by="row.names")
rownames(t_filtered_taxonomy_table) <- t_filtered_taxonomy_table[,1]
t_filtered_taxonomy_table <- t_filtered_taxonomy_table[,-1]
##Remove Mean column
t_filtered_taxonomy_table <- t_filtered_taxonomy_table[,-1]
#Remove duplicated rows and keep the last one
t_filtered_taxonomy_table = as.data.frame(t_filtered_taxonomy_table[!duplicated(t_filtered_taxonomy_table, fromLast = T), ])
##Transpose the matrix to get the filtered taxonomy table
filtered_taxonomy_table <- as.data.frame(t(t_filtered_taxonomy_table))
write.table(filtered_taxonomy_table, file="~/filtered_taxonomy.txt", sep = "\t", quote = F)
##Insterection plot
filtered_plot_data <- as.data.frame(setNames(replicate(2, numeric(0), simplify = F), letters[1:2]))
colnames(filtered_plot_data)[1:2] <- c("abundance","individuals")
##Add filter columns by abundance and individuals conditions
# 1 value: removed taxa
# 0 value: not removed taxa
for (i in 1:nrow(tax_parameters))  {
if (tax_parameters[i,"Mean"]<abundance_value) {
filtered_plot_data[i,"abundance"] <- 1
}
else {
# 1 value
filtered_plot_data[i,"abundance"] <- 0
}
if (tax_parameters[i,"N_of_non-0"]<individuals_value) {
filtered_plot_data[i,"individuals"] <- 1
}
else {
filtered_plot_data[i,"individuals"] <- 0
}
}
rownames(filtered_plot_data) <- rownames(tax_parameters)
##Add column: overlap between NOT removed taxa by both methods
filtered_plot_data$overlap <- "none"
##Add overlap column to color the plot with the intersection
for (i in 1:nrow(filtered_plot_data)) {
#If the taxa is NOT removed by the two methods
if (filtered_plot_data[i,"abundance"]==1 & filtered_plot_data[i,"individuals"]==1) {
#overlap column gets a random number between 20 and 40
filtered_plot_data[i, "overlap"] <- sample(20:40, 1)
}
else {
filtered_plot_data[i,"overlap"] <- 0
}
}
##Get rownames as a column to plot
filtered_plot_data <- cbind(Row.names = rownames(filtered_plot_data), filtered_plot_data)
rownames(filtered_plot_data) <- NULL
colnames(filtered_plot_data)[1] <- "Name"
library(UpSetR)
#Function to color the intersection in NOT removed taxonomies by both methods
yes <- function(row, min, max){
#Only count/color the taxa with overlap values
newData <- (row["overlap"] <= max) & (row["overlap"] >= min)
}
## Save the plot as pdf.file
pdf("intersection_filtering_plot.pdf")
##Intersection plot: marked in red the number of taxonomies removed by both methods
intersection_filtering_plot <- upset(filtered_plot_data, sets = c("abundance","individuals"), main.bar.color = "black", queries = list(list(query =intersects, params = list("abundance","individuals")), list( query=yes, params = list(20,40), color = "#528EE7", active = T)))
print(intersection_filtering_plot)
dev.off()
}
filtering_taxonomy(tax_table,0.01,15)
intestinal_groups <- read.table("~/Documents/Universitat/Holanda/Projecte/intestinal_content_group.txt", sep = "\t", header = T, row.names = 1)
filum_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/filum_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
filum_table <- read.table("~/Documents/Universitat/Holanda/Projecte/DUDes_results/filum_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
tax_composition_differences <- function(tax_level_table, category_table, top_tax_value) {
# Merge tax_level_table with category_table file
filum_groups <- merge(category_table, tax_level_table, by = "row.names")
# First column as Rownames (sample identification)
rownames(filum_groups) <- filum_groups[,1]
filum_groups <- filum_groups[,-1]
# Split filum_groups table by categories
split_categories <- split(filum_groups, filum_groups[,1])
# Packages needed
library(psych)
library(reshape2)
library(ggplot2)
# Save the different categories files in the global environment
j = 1
others_position = top_tax_value + 1
results_table <- matrix(nrow = others_position, ncol= 2 )
matrix_list <- list()
# Loop for to calculate the filum mean by category
for (i in split_categories) {
# Calculate mean
summary_table <- describe(i)
# Find the rows with the highest values by the given value
top_tax <- summary_table[order(summary_table$mean, decreasing = T)[1:top_tax_value],]
# Sum values and create another category: others
sum_top_tax <- sum(top_tax$mean)
others_tax <- as.numeric((100-sum_top_tax))
total_mean <- cbind(top_tax$mean)
total_mean <- rbind(total_mean, others_tax)
results_table[,1] <- total_mean
results_table[,2] <- c(rownames(top_tax), "others")
nam <- paste("Category", j , sep = "")
matrix_list[[j]] <-  assign(nam, results_table)
j <- j + 1
}
# Change colnames from all matrix in the list
for (k in seq_along(matrix_list)) {
colnames(matrix_list[[k]]) <- c("mean","bacteria")
}
# Merge function
MyMerge <- function(x, y){
df <- merge(x, y, by="bacteria" , all.x= TRUE, all.y= TRUE)
return(df)
}
# Merge the matrix saved in the matrix_list in a same table
composition_table <- Reduce(MyMerge, matrix_list)
# First column as Rownames (sample identification)
rownames(composition_table) <- composition_table[,1]
composition_table <- composition_table[,-1]
# For loop to name the columns depending on the groyup/category in the composition_table
for (bb in 1:ncol(composition_table)) {
nc <- paste("Category", bb , sep = "")
colnames(composition_table)[bb] = nc
assign(nc,composition_table)
}
# Export the table with the top4 abundances per each category
write.table(composition_table, file = "~/bacteria_composition.txt", sep = "\t", quote = F)
## Stacked barplot ##
composition_table$bacteria = row.names(composition_table)
row.names(composition_table) <- NULL
my_plot_table <- melt(composition_table, id.vars = "bacteria")
filum_plot <- ggplot (my_plot_table, aes(x=variable, y=as.numeric(value))) + geom_bar (aes(fill = bacteria), stat = "identity") + theme_classic() + xlab("Group") + ylab("relative_abundance")
# Save the plots as pdf.file
pdf("taxonomy_composition_plot.pdf")
print(filum_plot)
dev.off()
}
tax_composition_differences(filum_table, intestinal_groups, 4)
tax_composition_differences <- function(tax_level_table, category_table, top_tax_value) {
# Merge tax_level_table with category_table file
filum_groups <- merge(category_table, tax_level_table, by = "row.names")
# First column as Rownames (sample identification)
rownames(filum_groups) <- filum_groups[,1]
filum_groups <- filum_groups[,-1]
# Split filum_groups table by categories
split_categories <- split(filum_groups, filum_groups[,1])
# Packages needed
library(psych)
library(reshape2)
library(ggplot2)
# Save the different categories files in the global environment
j = 1
others_position = top_tax_value + 1
results_table <- matrix(nrow = others_position, ncol= 2 )
matrix_list <- list()
# Loop for to calculate the filum mean by category
for (i in split_categories) {
# Calculate mean
summary_table <- describe(i)
# Find the rows with the highest values by the given value
top_tax <- summary_table[order(summary_table$mean, decreasing = T)[1:top_tax_value],]
# Sum values and create another category: others
sum_top_tax <- sum(top_tax$mean)
others_tax <- as.numeric((100-sum_top_tax))
total_mean <- cbind(top_tax$mean)
total_mean <- rbind(total_mean, others_tax)
results_table[,1] <- total_mean
results_table[,2] <- c(rownames(top_tax), "others")
nam <- paste("Category", j , sep = "")
matrix_list[[j]] <-  assign(nam, results_table)
j <- j + 1
}
# Change colnames from all matrix in the list
for (k in seq_along(matrix_list)) {
colnames(matrix_list[[k]]) <- c("mean","bacteria")
}
# Merge function
MyMerge <- function(x, y){
df <- merge(x, y, by="bacteria" , all.x= TRUE, all.y= TRUE)
return(df)
}
# Merge the matrix saved in the matrix_list in a same table
composition_table <- Reduce(MyMerge, matrix_list)
# First column as Rownames (sample identification)
rownames(composition_table) <- composition_table[,1]
composition_table <- composition_table[,-1]
# For loop to name the columns depending on the groyup/category in the composition_table
for (bb in 1:ncol(composition_table)) {
nc <- paste("Category", bb , sep = "")
colnames(composition_table)[bb] = nc
assign(nc,composition_table)
}
# Export the table with the top4 abundances per each category
write.table(composition_table, file = "~/bacteria_composition.txt", sep = "\t", quote = F)
## Stacked barplot ##
composition_table$bacteria = row.names(composition_table)
row.names(composition_table) <- NULL
my_plot_table <- melt(composition_table, id.vars = "bacteria")
filum_plot <- ggplot (my_plot_table, aes(x=variable, y=as.numeric(value))) + geom_bar (aes(fill = bacteria), stat = "identity") + theme_classic() + xlab("Group") + ylab("relative_abundance")
# Save the plots as pdf.file
pdf("taxonomy_composition_plot.pdf")
print(filum_plot)
dev.off()
}
tax_composition_differences(filum_table, intestinal_groups, 4)
filum_table <- read.table("~/DUDes_results/filum_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
filum_groups <- merge(filum_table, intestinal_groups, by = "row.names")
rownames(filum_groups) <- filum_groups[,1]
filum_groups <- filum_groups[,-1]
library(psych)
intermediate_filum <- subset(filum_groups, filum_groups$Group=="intermediate")
intermediate_filum <- intermediate_filum[,-13]
resum_intermediate <- describe(intermediate_filum)
top4_table_intermediate <- resum_intermediate[order(resum_intermediate$mean, decreasing = T)[1:4],]
sum_top4_intermediate <- sum(top4_table_intermediate$mean)
others_intermediate <- (100-sum_top4_intermediate)
intermediate_results <- subset(top4_table_intermediate, select = "mean")
colnames(intermediate_results) <- "Intermediate"
intermediate_results <- rbind(intermediate_results, others_intermediate)
rownames(intermediate_results)[5] <- "others"
normal_filum <- subset(filum_groups, filum_groups$Group=="normal")
normal_filum <- normal_filum[,-13]
resum_normal <- describe(normal_filum)
top4_table_normal <- resum_normal[order(resum_normal$mean, decreasing = T)[1:4],]
sum_top4_normal <- sum(top4_table_normal$mean)
others_normal <- (100-sum_top4_normal)
normal_results <- subset(top4_table_normal, select = "mean")
colnames(normal_results) <- "Normal"
normal_results <- rbind(normal_results, others_normal)
rownames(normal_results)[5] <- "others"
small_filum <- subset(filum_groups, filum_groups$Group=="small intestine")
small_filum <- small_filum[,-13]
resum_small <- describe(small_filum)
top4_table_small <- resum_small[order(resum_small$mean, decreasing = T)[1:4],]
sum_top4_small <- sum(top4_table_small$mean)
others_small <- (100-sum_top4_small)
small_results <- subset(top4_table_small, select = "mean")
colnames(small_results) <- "Small_Intestine"
small_results <- rbind(small_results, others_small)
rownames(small_results)[5] <- "others"
normal_intermediate <- merge(normal_results, intermediate_results, by="row.names")
rownames(normal_intermediate) <- normal_intermediate[,1]
normal_intermediate <- normal_intermediate[,-1]
filum_group_table <- merge(normal_intermediate, small_results, by = "row.names")
rownames(filum_group_table) <- filum_group_table[,1]
filum_group_table <- filum_group_table[,-1]
library(reshape2)
library(ggplot2)
filum_group_table$bacteria=row.names(filum_group_table)
row.names(filum_group_table)=NULL
my_table=melt(filum_group_table)
filum_plot <- ggplot (my_table, aes(x=variable, y=value)) + geom_bar (aes(fill = bacteria), stat = "identity") + theme_classic() + xlab("Group") + ylab("relative_abundance")
filum_plot
filum_plot <- ggplot (my_table, aes(x=variable, y=value)) + geom_bar (aes(fill = bacteria), stat = "identity") + theme_classic() + xlab("Group") + ylab("relative_abundance") + theme(legend.text=element_text(size=12))
filum_plot
filum_plot <- ggplot (my_table, aes(x=variable, y=value)) + geom_bar (aes(fill = bacteria), stat = "identity") + theme_classic() + xlab("Group") + ylab("relative_abundance") + theme(legend.text=element_text(size=15))
filum_plot
View(small_results)
View(my_table)
filum_plot <- ggplot (my_table, aes(x=variable, y=value)) + geom_bar (aes(fill = bacteria), stat = "identity") + theme_classic() + xlab("Group") + ylab("relative_abundance") + theme(legend.text=element_text(size=15)) theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"))
filum_plot
filum_plot <- ggplot (my_table, aes(x=variable, y=value)) + geom_bar (aes(fill = bacteria), stat = "identity") + theme_classic() + xlab("Group") + ylab("relative_abundance") + theme(legend.text=element_text(size=15)) + theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"))
filum_plot
filum_plot <- ggplot (my_table, aes(x=variable, y=value)) + geom_bar (aes(fill = bacteria), stat = "identity") + theme_classic() + xlab("Group") + ylab("relative_abundance") + theme(legend.text=element_text(size=15)) + theme(axis.text=element_text(size=10), axis.title=element_text(size=10,face="bold"))
filum_plot
filum_plot <- ggplot (my_table, aes(x=variable, y=value)) + geom_bar (aes(fill = bacteria), stat = "identity") + theme_classic() + xlab("Group") + ylab("relative_abundance") + theme(legend.text=element_text(size=20)) + theme(axis.text=element_text(size=15), axis.title=element_text(size=15,face="bold"))
filum_plot
species_table <- read.table("~/Documents/Universitat/Holanda/Projecte/DUDes_results/species_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
View(species_table)
alpha <- as.data.frame(diversity(species_table,index="shannon"))
library(vegan)
library(ggplot2)
alpha <- as.data.frame(diversity(species_table,index="shannon"))
View(alpha)
intestinal_groups <- read.table("~/Documents/Universitat/Holanda/Projecte/intestinal_content_group.txt", sep = "\t", header = T, row.names = 1)
group_taxa <- merge(intestinal_groups, alpha, by="row.names")
rownames(group_taxa) <- group_taxa[,1]
group_taxa2 <- group_taxa[,-1]
colnames(group_taxa2)[2] <- "diversity"
group_taxa2$Group2="none"
group_taxa2[group_taxa2$Group=="normal",]$Group2="1_normal"
group_taxa2[group_taxa2$Group=="intermediate",]$Group2="2_intermediate"
group_taxa2[group_taxa2$Group=="small intestine",]$Group2="3_small_intestine"
violin_plot <- ggplot(group_taxa2, aes(x=group_taxa2$Group2, y=group_taxa2$diversity, fill=group_taxa2$Group2)) + labs (y="Shannon Diversity Index", x="Group") + geom_violin(trim=FALSE) + geom_boxplot(width = 0.1) + scale_fill_manual(values=c("black","#2F2BFF","red")) + theme_classic() + theme(legend.position="none") + theme(axis.text.x = element_text(hjust = 1, size=16,color="black"), axis.text.y = element_text(hjust = 1, size = 15, color = "black"))
violin_plot
violin_plot <- ggplot(group_taxa2, aes(x=group_taxa2$Group2, y=group_taxa2$diversity, fill=group_taxa2$Group2)) + labs (y="Shannon Diversity Index", x="Group") + geom_violin(trim=FALSE) + geom_boxplot(width = 0.1) + scale_fill_manual(values=c("black","#2F2BFF","red")) + theme_classic() + theme(legend.position="none") + theme(axis.text.x = element_text(hjust = 1, size=10,color="black"), axis.text.y = element_text(hjust = 1, size = 20, color = "black"))
violin_plot
violin_plot <- ggplot(group_taxa2, aes(x=group_taxa2$Group2, y=group_taxa2$diversity, fill=group_taxa2$Group2)) + labs (y="Shannon Diversity Index", x="Group") + geom_violin(trim=FALSE) + geom_boxplot(width = 0.1) + scale_fill_manual(values=c("black","#2F2BFF","red")) + theme_classic() + theme(legend.position="none") + theme(axis.text = element_text(size = 10), axis.title = element_text(size = 15))
violin_plot
function_metadata <- read.csv("~/Desktop/phenotype_data_165ruggero.csv", header = T, row.names = 1, check.names = F)
View(function_metadata)
rownames(function_metadata) <- function_metadata[,1]
function_metadata <- function_metadata[,-1]
my_results = matrix(ncol = 6, nrow = ncol(function_metadata))
for (k in 1:ncol(function_metadata)){
if (is.numeric(function_metadata[,k])) {
# Keep in "x" the result from describe function (done in the columns) - for each factor
x = describe(function_metadata[,k])
z = nzsum(function_metadata[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1] = "numerical"
my_results[k,2] = x$median
my_results[k,3] = x$mean
my_results[k,4] = x$sd
my_results[k,5] = x$n
my_results[k,6] = z
}
# Condition: if the column values are categorical
else {
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x = tblFun(function_metadata[,k])
z = nzsum(function_metadata[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[k,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[k,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[k,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[k,5]=sum(x[,1])
my_results[k,6]= z
}
}
tblFun <- function(x) {
# Create a table
tbl <- table(x)
# Combine columnes/rows to get the counts and percentage (creates new table -> res)
res <- cbind(tbl,round(prop.table(tbl)*100,2))
# Give names to the columns
colnames(res) <- c('Count','Percentage')
res
}
nzsum <- function(x) {
sum (is.na(x))
}
library (psych)
my_results = matrix(ncol = 6, nrow = ncol(function_metadata))
for (k in 1:ncol(function_metadata)){
if (is.numeric(function_metadata[,k])) {
# Keep in "x" the result from describe function (done in the columns) - for each factor
x = describe(function_metadata[,k])
z = nzsum(function_metadata[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1] = "numerical"
my_results[k,2] = x$median
my_results[k,3] = x$mean
my_results[k,4] = x$sd
my_results[k,5] = x$n
my_results[k,6] = z
}
# Condition: if the column values are categorical
else {
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x = tblFun(function_metadata[,k])
z = nzsum(function_metadata[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[k,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[k,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[k,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[k,5]=sum(x[,1])
my_results[k,6]= z
}
}
rownames(my_results) = colnames(function_metadata)
colnames(my_results) = c("Type", "Categories/Median", "Counts/Mean", "SD/%", "Number_non-zeros(n)", "Number_NA")
View(my_results)
write.table (my_results, file = "~/total_metadata_table1.txt" , quote = F, sep = "\t")
crohn_table <- subset(function_metadata, function_metadata$Diagnosis=="Crohn's disease")
View(crohn_table)
my_results = matrix(ncol = 6, nrow = ncol(crohn_table))
for (k in 1:ncol(crohn_table)){
if (is.numeric(crohn_table[,k])) {
# Keep in "x" the result from describe function (done in the columns) - for each factor
x = describe(crohn_table[,k])
z = nzsum(crohn_table[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1] = "numerical"
my_results[k,2] = x$median
my_results[k,3] = x$mean
my_results[k,4] = x$sd
my_results[k,5] = x$n
my_results[k,6] = z
}
# Condition: if the column values are categorical
else {
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x = tblFun(crohn_table[,k])
z = nzsum(crohn_table[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[k,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[k,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[k,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[k,5]=sum(x[,1])
my_results[k,6]= z
}
}
rownames(my_results) = colnames(crohn_table)
colnames(my_results) = c("Type", "Categories/Median", "Counts/Mean", "SD/%", "Number_non-zeros(n)", "Number_NA")
View(my_results)
write.table (my_results, file = "~/crohn_metadata_table1.txt" , quote = F, sep = "\t")
write.table (my_results, file = "~/crohn_metadata_table1.txt" , quote = F, sep = "\t")
ulcerative_table <- subset(function_metadata, function_metadata$Diagnosis=="Ulcerative colitis")
my_results = matrix(ncol = 6, nrow = ncol(ulcerative_table))
for (k in 1:ncol(ulcerative_table)){
if (is.numeric(ulcerative_table[,k])) {
# Keep in "x" the result from describe function (done in the columns) - for each factor
x = describe(ulcerative_table[,k])
z = nzsum(ulcerative_table[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1] = "numerical"
my_results[k,2] = x$median
my_results[k,3] = x$mean
my_results[k,4] = x$sd
my_results[k,5] = x$n
my_results[k,6] = z
}
# Condition: if the column values are categorical
else {
# Keep in "x" the result from tblFun function (done in the columns) - for each factor
x = tblFun(ulcerative_table[,k])
z = nzsum(ulcerative_table[,k])
# In the new table ("x"): keep different values in the different columns
my_results[k,1]="categorical"
# toString to keep the possible different values/categories in the same vector/column
my_results[k,2]=toString(rownames(x))
# First column table x = 'Count'
my_results[k,3]=toString(x[,1])
# Second column table x = 'Percentage'
my_results[k,4]=toString(x[,2])
# Sum of the values on column1 ("x")
my_results[k,5]=sum(x[,1])
my_results[k,6]= z
}
}
rownames(my_results) = colnames(ulcerative_table)
colnames(my_results) = c("Type", "Categories/Median", "Counts/Mean", "SD/%", "Number_non-zeros(n)", "Number_NA")
write.table (my_results, file = "~/ulcerative_metadata_table1.txt" , quote = F, sep = "\t")
View(my_results)
