View(aa)
View(aa)
summary_table <- describe(filum_table)
View(summary_table)
top_tax <- summary_table[order(summary_table$mean, decreasing = T)[1:top_value],]
top_value <- 3
top_tax <- summary_table[order(summary_table$mean, decreasing = T)[1:top_value],]
View(top_tax)
total_tax_names <- cbind(rownames(top_tax))
View(total_tax_names)
rownames(total_tax_names) <- total_tax_names[,1]
t_category_table <- t(category_table)
View(t_category_table)
numeric_plot_table <- merge(total_tax_names, t_category_table, by = "row.names")
View(numeric_plot_table)
rownames(numeric_plot_table) <- numeric_plot_table[,1]
numeric_plot_table <- numeric_plot_table[,-1]
numeric_plot_table <- numeric_plot_table[,-1]
t_plot_table <- t(numeric_plot_table)
View(t_plot_table)
View(t_plot_table)
for (jj in 1:ncol(t_plot_table)) {
name_category <- colnames(category_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
name_pdf <- paste(name_category,a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
a <- ".pdf"
for (jj in 1:ncol(t_plot_table)) {
name_category <- colnames(category_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
name_pdf <- paste(name_category,a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
my_col=c("#0000FF","#62A4D1","#5BE55B","#FFF000", "#FF0000")
for (jj in 1:ncol(t_plot_table)) {
name_category <- colnames(category_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
name_pdf <- paste(name_category,a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
t_plot_table1 <- merge(t_plot_table, my_pcoa, by="row.names")
View(t_plot_table1)
for (jj in 1:top_value) {
name_category <- colnames(category_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
name_pdf <- paste(name_category,a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
for (jj in 1:top_value) {
name_category <- colnames(category_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
name_pdf <- paste(name_category,a, sep = "")
bla = ggplot(t_plot_table1, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table1[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table1[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,1])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,1])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
name_category <- colnames(category_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
ggplot(t_plot_table1, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table1[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table1[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
ggplot(t_plot_table, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,1])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,1])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,1])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,1])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
a <- ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,1])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,1])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
a
species_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/species_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
filum_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/filum_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
pcoa_function <- function(tax_level_table, pcoa_elements, category_table, category_number, top_value) {
##Required packages
library(vegan)
library(ggplot2)
# Generate a distance matrix - Bray method
beta <- vegdist(tax_level_table, method="bray")
# cmdscale -> multidimensional scaling of a data matrix (distance matrix)
my_pcoa <- as.data.frame(cmdscale(beta, k = pcoa_elements))
a <- ".pdf"
if (is.numeric(category_table[,1])) {
my_col=c("#0000FF","#62A4D1","#5BE55B","#FFF000", "#FF0000")
if (ncol(category_table)>1) {
summary_table <- describe(category_table)
## Find the rows with the highest values by the given value
top_tax <- summary_table[order(summary_table$mean, decreasing = T)[1:top_value],]
total_tax_names <- cbind(rownames(top_tax))
rownames(total_tax_names) <- total_tax_names[,1]
t_category_table <- t(category_table)
numeric_plot_table <- merge(total_tax_names, t_category_table, by = "row.names")
rownames(numeric_plot_table) <- numeric_plot_table[,1]
numeric_plot_table <- numeric_plot_table[,-1]
numeric_plot_table <- numeric_plot_table[,-1]
t_plot_table <- t(numeric_plot_table)
for (jj in 1:top_value) {
name_category <- colnames(category_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
name_pdf <- paste(name_category,a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
}
else {
name_category <- colnames(category_table)[1]
name_category = unlist(strsplit(name_category, split='(', fixed=TRUE))[1]
name_pdf <- paste(name_category, a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y= V2, geom = "blank", colour = category_table[,1])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(category_table[,1])) + theme_classic() + labs(x="PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
}
else {
categoric_plot_table <- merge(category_table, my_pcoa, by="row.names")
rownames(categoric_plot_table) <- categoric_plot_table[,1]
categoric_plot_table <- categoric_plot_table[,-1]
# Create a new column to assign a number to each category
categoric_plot_table$category <- as.integer(categoric_plot_table[,1])
# Create a new column to colour the plot depending on the category (level)
categoric_plot_table$color = "none"
# Create a palette of colors depending on the number of categories
my_palette <- matrix(brewer.pal(category_number,"Set1"))
#Assign one different color to each different category
for (i in 1:category_number){
categoric_plot_table[categoric_plot_table$category == i,]$color = my_palette[i,1]
}
name_category <- colnames(category_table)[1]
name_pdf <- paste(name_category, a, sep = "")
bla = ggplot (categoric_plot_table, aes(x=V1, y=V2, geom="blank", colour=color)) + geom_point () + scale_color_identity("All_categories", breaks=categoric_plot_table$color, labels=categoric_plot_table$category, guide = "legend") + theme_classic() + labs(x="PCoA1", y="PCoA2")
pdf(name_pdf)
print(bla)
dev.off()
}
}
pcoa_function(species_table, 4, filum_table, 1, 3)
pcoa_function <- function(tax_level_table, pcoa_elements, category_table, category_number, top_value) {
##Required packages
library(vegan)
library(ggplot2)
library(psych)
# Generate a distance matrix - Bray method
beta <- vegdist(tax_level_table, method="bray")
# cmdscale -> multidimensional scaling of a data matrix (distance matrix)
my_pcoa <- as.data.frame(cmdscale(beta, k = pcoa_elements))
a <- ".pdf"
if (is.numeric(category_table[,1])) {
my_col=c("#0000FF","#62A4D1","#5BE55B","#FFF000", "#FF0000")
if (ncol(category_table)>1) {
summary_table <- describe(category_table)
## Find the rows with the highest values by the given value
top_tax <- summary_table[order(summary_table$mean, decreasing = T)[1:top_value],]
total_tax_names <- cbind(rownames(top_tax))
rownames(total_tax_names) <- total_tax_names[,1]
t_category_table <- t(category_table)
numeric_plot_table <- merge(total_tax_names, t_category_table, by = "row.names")
rownames(numeric_plot_table) <- numeric_plot_table[,1]
numeric_plot_table <- numeric_plot_table[,-1]
numeric_plot_table <- numeric_plot_table[,-1]
t_plot_table <- t(numeric_plot_table)
for (jj in 1:top_value) {
name_category <- colnames(category_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
name_pdf <- paste(name_category,a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
}
else {
name_category <- colnames(category_table)[1]
name_category = unlist(strsplit(name_category, split='(', fixed=TRUE))[1]
name_pdf <- paste(name_category, a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y= V2, geom = "blank", colour = category_table[,1])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(category_table[,1])) + theme_classic() + labs(x="PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
}
else {
categoric_plot_table <- merge(category_table, my_pcoa, by="row.names")
rownames(categoric_plot_table) <- categoric_plot_table[,1]
categoric_plot_table <- categoric_plot_table[,-1]
# Create a new column to assign a number to each category
categoric_plot_table$category <- as.integer(categoric_plot_table[,1])
# Create a new column to colour the plot depending on the category (level)
categoric_plot_table$color = "none"
# Create a palette of colors depending on the number of categories
my_palette <- matrix(brewer.pal(category_number,"Set1"))
#Assign one different color to each different category
for (i in 1:category_number){
categoric_plot_table[categoric_plot_table$category == i,]$color = my_palette[i,1]
}
name_category <- colnames(category_table)[1]
name_pdf <- paste(name_category, a, sep = "")
bla = ggplot (categoric_plot_table, aes(x=V1, y=V2, geom="blank", colour=color)) + geom_point () + scale_color_identity("All_categories", breaks=categoric_plot_table$color, labels=categoric_plot_table$category, guide = "legend") + theme_classic() + labs(x="PCoA1", y="PCoA2")
pdf(name_pdf)
print(bla)
dev.off()
}
}
pcoa_function(species_table, 4, filum_table, 1, 3)
category_table <- filum_table
tax_level_table <- species_table
pcoa_elements <- 4
category_number <- 3
top_value <- 3
library(vegan)
library(ggplot2)
library(psych)
beta <- vegdist(tax_level_table, method="bray")
my_pcoa <- as.data.frame(cmdscale(beta, k = pcoa_elements))
a <- ".pdf"
my_col=c("#0000FF","#62A4D1","#5BE55B","#FFF000", "#FF0000")
summary_table <- describe(category_table)
View(summary_table)
top_tax <- summary_table[order(summary_table$mean, decreasing = T)[1:top_value],]
total_tax_names <- cbind(rownames(top_tax))
rownames(total_tax_names) <- total_tax_names[,1]
View(top_tax)
t_category_table <- as.data.frame(t(category_table))
View(t_category_table)
numeric_plot_table <- merge(total_tax_names, t_category_table, by = "row.names")
View(numeric_plot_table)
rownames(numeric_plot_table) <- numeric_plot_table[,1]
numeric_plot_table <- numeric_plot_table[,-1]
numeric_plot_table <- numeric_plot_table[,-1]
t_plot_table <- as.data.frame(t(numeric_plot_table))
View(t_plot_table)
View(category_table)
for (jj in 1:ncol(t_plot_table)) {
name_category <- colnames(t_plot_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
name_pdf <- paste(name_category,a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
pcoa_function <- function(tax_level_table, pcoa_elements, category_table, category_number, top_value) {
##Required packages
library(vegan)
library(ggplot2)
library(psych)
# Generate a distance matrix - Bray method
beta <- vegdist(tax_level_table, method="bray")
# cmdscale -> multidimensional scaling of a data matrix (distance matrix)
my_pcoa <- as.data.frame(cmdscale(beta, k = pcoa_elements))
a <- ".pdf"
if (is.numeric(category_table[,1])) {
my_col=c("#0000FF","#62A4D1","#5BE55B","#FFF000", "#FF0000")
if (ncol(category_table)>1) {
summary_table <- describe(category_table)
## Find the rows with the highest values by the given value
top_tax <- summary_table[order(summary_table$mean, decreasing = T)[1:top_value],]
total_tax_names <- cbind(rownames(top_tax))
rownames(total_tax_names) <- total_tax_names[,1]
t_category_table <- as.data.frame(t(category_table))
numeric_plot_table <- merge(total_tax_names, t_category_table, by = "row.names")
rownames(numeric_plot_table) <- numeric_plot_table[,1]
numeric_plot_table <- numeric_plot_table[,-1]
numeric_plot_table <- numeric_plot_table[,-1]
t_plot_table <- as.data.frame(t(numeric_plot_table))
for (jj in 1:ncol(t_plot_table)) {
name_category <- colnames(t_plot_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
name_pdf <- paste(name_category,a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
}
else {
name_category <- colnames(category_table)[1]
name_category = unlist(strsplit(name_category, split='(', fixed=TRUE))[1]
name_pdf <- paste(name_category, a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y= V2, geom = "blank", colour = category_table[,1])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(category_table[,1])) + theme_classic() + labs(x="PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
}
else {
categoric_plot_table <- merge(category_table, my_pcoa, by="row.names")
rownames(categoric_plot_table) <- categoric_plot_table[,1]
categoric_plot_table <- categoric_plot_table[,-1]
# Create a new column to assign a number to each category
categoric_plot_table$category <- as.integer(categoric_plot_table[,1])
# Create a new column to colour the plot depending on the category (level)
categoric_plot_table$color = "none"
# Create a palette of colors depending on the number of categories
my_palette <- matrix(brewer.pal(category_number,"Set1"))
#Assign one different color to each different category
for (i in 1:category_number){
categoric_plot_table[categoric_plot_table$category == i,]$color = my_palette[i,1]
}
name_category <- colnames(category_table)[1]
name_pdf <- paste(name_category, a, sep = "")
bla = ggplot (categoric_plot_table, aes(x=V1, y=V2, geom="blank", colour=color)) + geom_point () + scale_color_identity("All_categories", breaks=categoric_plot_table$color, labels=categoric_plot_table$category, guide = "legend") + theme_classic() + labs(x="PCoA1", y="PCoA2")
pdf(name_pdf)
print(bla)
dev.off()
}
}
species_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/species_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
intestinal_groups <- read.table("~/Documents/Universitat/Holanda/Projecte/intestinal_groups.txt", sep = "\t", header = T, row.names = 1, check.names = F)
filum_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/filum_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
alpha_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/alpha_diversity_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
pcoa_function(species_table, 4, filum_table, 1, 3)
pcoa_function(species_table, 4, intestinal_groups, 3, 1)
pcoa_function <- function(tax_level_table, pcoa_elements, category_table, category_number, top_value) {
##Required packages
library(vegan)
library(ggplot2)
library(psych)
library(RColorBrewer)
# Generate a distance matrix - Bray method
beta <- vegdist(tax_level_table, method="bray")
# cmdscale -> multidimensional scaling of a data matrix (distance matrix)
my_pcoa <- as.data.frame(cmdscale(beta, k = pcoa_elements))
a <- ".pdf"
if (is.numeric(category_table[,1])) {
my_col=c("#0000FF","#62A4D1","#5BE55B","#FFF000", "#FF0000")
if (ncol(category_table)>1) {
summary_table <- describe(category_table)
## Find the rows with the highest values by the given value
top_tax <- summary_table[order(summary_table$mean, decreasing = T)[1:top_value],]
total_tax_names <- cbind(rownames(top_tax))
rownames(total_tax_names) <- total_tax_names[,1]
t_category_table <- as.data.frame(t(category_table))
numeric_plot_table <- merge(total_tax_names, t_category_table, by = "row.names")
rownames(numeric_plot_table) <- numeric_plot_table[,1]
numeric_plot_table <- numeric_plot_table[,-1]
numeric_plot_table <- numeric_plot_table[,-1]
t_plot_table <- as.data.frame(t(numeric_plot_table))
for (jj in 1:ncol(t_plot_table)) {
name_category <- colnames(t_plot_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
name_pdf <- paste(name_category,a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
}
else {
name_category <- colnames(category_table)[1]
name_category = unlist(strsplit(name_category, split='(', fixed=TRUE))[1]
name_pdf <- paste(name_category, a, sep = "")
bla = ggplot(my_pcoa, aes(x=V1, y= V2, geom = "blank", colour = category_table[,1])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(category_table[,1])) + theme_classic() + labs(x="PCoA1", y = "PCoA2") + ggtitle(name_category)
pdf(name_pdf)
print(bla)
dev.off()
}
}
else {
categoric_plot_table <- merge(category_table, my_pcoa, by="row.names")
rownames(categoric_plot_table) <- categoric_plot_table[,1]
categoric_plot_table <- categoric_plot_table[,-1]
# Create a new column to assign a number to each category
categoric_plot_table$category <- as.integer(categoric_plot_table[,1])
# Create a new column to colour the plot depending on the category (level)
categoric_plot_table$color = "none"
# Create a palette of colors depending on the number of categories
my_palette <- matrix(brewer.pal(category_number,"Set1"))
#Assign one different color to each different category
for (i in 1:category_number){
categoric_plot_table[categoric_plot_table$category == i,]$color = my_palette[i,1]
}
name_category <- colnames(category_table)[1]
name_pdf <- paste(name_category, a, sep = "")
bla = ggplot (categoric_plot_table, aes(x=V1, y=V2, geom="blank", colour=color)) + geom_point () + scale_color_identity("All_categories", breaks=categoric_plot_table$color, labels=categoric_plot_table$category, guide = "legend") + theme_classic() + labs(x="PCoA1", y="PCoA2")
pdf(name_pdf)
print(bla)
dev.off()
}
}
pcoa_function(species_table, 4, intestinal_groups, 3, 1)
pcoa_function(species_table, 4, alpha, 1, 1)
pcoa_function(species_table, 4, alpha_table, 1, 1)
?dev.off()
pcoa_function <- function(tax_level_table, pcoa_elements, variable_table, category_number, top_value) {
##Required packages
library(vegan)
library(ggplot2)
library(psych)
library(RColorBrewer)
## Generate a distance matrix - Bray method
beta <- vegdist(tax_level_table, method="bray")
## cmdscale -> multidimensional scaling of a data matrix (distance matrix)
my_pcoa <- as.data.frame(cmdscale(beta, k = pcoa_elements))
# Variable that contains the ".pdf" string to save plots in pdf files
a <- ".pdf"
## If the variable_table is numeric:
if (is.numeric(variable_table[,1])) {
# Variable that contains colors codes to color the plot
my_col=c("#0000FF","#62A4D1","#5BE55B","#FFF000", "#FF0000")
# If the category table has more than one column:
if (ncol(variable_table)>1) {
# Calculate the mean for each column of the variable_table
summary_table <- describe(variable_table)
# Find the rows with the highest mean values (more abundant variables): top_value
top_tax <- summary_table[order(summary_table$mean, decreasing = T)[1:top_value],]
# Save the names of the highest mean values
total_tax_names <- cbind(rownames(top_tax))
# First column as Rownames
rownames(total_tax_names) <- total_tax_names[,1]
# Transpose the category table to merge
t_variable_table <- as.data.frame(t(variable_table))
# Merge the t_variable_table with the total_tax_names (table with the highest mean values)
numeric_plot_table <- merge(total_tax_names, t_variable_table, by = "row.names")
# First column as Rownames
rownames(numeric_plot_table) <- numeric_plot_table[,1]
numeric_plot_table <- numeric_plot_table[,-1]
# Remove repeated column (rownames)
numeric_plot_table <- numeric_plot_table[,-1]
# Transpose the new table to have the variables as columns
t_plot_table <- as.data.frame(t(numeric_plot_table))
# For loop to get plots as number of variables in t_plot_table
for (jj in 1:ncol(t_plot_table)) {
# Save the name of the variable to title the plot
name_category <- colnames(t_plot_table)[jj]
name_category = unlist(strsplit(name_category, split='|', fixed=TRUE))[2]
# Add the "a" variable with ".pdf" string to the name_category to save the plot as a pdf file
name_pdf <- paste(name_category,a, sep = "")
# Create the plot
bla = ggplot(my_pcoa, aes(x=V1, y=V2, geom = "blank", colour = t_plot_table[,jj])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(t_plot_table[,jj])) + theme_classic() + labs(x = "PCoA1", y = "PCoA2") + ggtitle(name_category)
#x_axis: V1 from my_pcoa table (first PCoA element)
#y_axis: V2 from my_pcoa table (second PCoA element)
#colour: a different plot is generated for each column in t_plot_table
# Create the pdf file
pdf(name_pdf)
# Print the plot
print(bla)
# Empty the current device to create the next plot in the next loop
dev.off()
}
}
# The variable_table has only one column:
else {
# Save the name of the variable to title the plot
name_category <- colnames(variable_table)[1]
name_category = unlist(strsplit(name_category, split='(', fixed=TRUE))[1]
# Add the "a" variable with ".pdf" string to the name_category to save the plot as a pdf file
name_pdf <- paste(name_category, a, sep = "")
# Create the plot
bla = ggplot(my_pcoa, aes(x=V1, y= V2, geom = "blank", colour = variable_table[,1])) + geom_point() + scale_color_gradientn(colours = my_col, colnames(variable_table[,1])) + theme_classic() + labs(x="PCoA1", y = "PCoA2") + ggtitle(name_category)
#x_axis: V1 from my_pcoa table (first PCoA element)
#y_axis: V2 from my_pcoa table (second PCoA element)
#colour: colored by the column in the variable_table
# Create the pdf file
pdf(name_pdf)
# Print the plot
print(bla)
# Empty the current device
dev.off()
}
}
## The variable_table is categoric:
else {
# Merge the variable_table with my_pcoa table
categoric_plot_table <- merge(variable_table, my_pcoa, by="row.names")
# First column as Rownames
rownames(categoric_plot_table) <- categoric_plot_table[,1]
categoric_plot_table <- categoric_plot_table[,-1]
# Create a new column to assign a number to each category
categoric_plot_table$category <- as.integer(categoric_plot_table[,1])
# Create a new column to colour the plot depending on the category (level)
categoric_plot_table$color = "none"
# Create a palette of colors depending on the number of categories
my_palette <- matrix(brewer.pal(category_number,"Set1"))
# For loop to assign one different color to each different category in a new column
for (i in 1:category_number){
categoric_plot_table[categoric_plot_table$category == i,]$color = my_palette[i,1]
}
# Save the name of the variable to title the plot
name_category <- colnames(variable_table)[1]
# Add the "a" variable with ".pdf" string to the name_category to save the plot as a pdf file
name_pdf <- paste(name_category, a, sep = "")
# Create the plot
bla = ggplot (categoric_plot_table, aes(x=V1, y=V2, geom="blank", colour=color)) + geom_point () + scale_color_identity("All_categories", breaks=categoric_plot_table$color, labels=categoric_plot_table$category, guide = "legend") + theme_classic() + labs(x="PCoA1", y="PCoA2")
#x_axis: V1 from my_pcoa table (first PCoA element)
#y_axis: V2 from my_pcoa table (second PCoA element)
#colour: colored by the new color column
# Create the pdf file
pdf(name_pdf)
# Print the plot
print(bla)
# Empty the current device
dev.off()
}
}
alpha_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/alpha_diversity_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
View(alpha_table)
View(alpha_table)
alpha_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/alpha_diversity_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
View(alpha_table)
pcoa_function(species_table, 4, alpha_table, 1, 1)
species_table <- read.table("~/Documents/Universitat/Holanda/Projecte/Filtered_DUDes/species_table_DUDes.txt", sep = "\t", header = T, row.names = 1, check.names = F)
pcoa_function(species_table, 4, alpha_table, 1, 1)
